import fs from 'fs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
const catalogData = JSON.parse(fs.readFileSync('./full-catalog-processed.json', 'utf-8'));

console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π storage.ts —Å –ø–æ–ª–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
const storageTemplate = `import { 
  Product, InsertProduct, 
  Category, InsertCategory, 
  Order, InsertOrder, 
  Consultation, InsertConsultation 
} from "@shared/schema";

export interface IStorage {
  // Products
  getProducts(filters?: { category?: string; minPrice?: number; maxPrice?: number; inStock?: boolean; search?: string }): Promise<Product[]>;
  getProduct(id: number): Promise<Product | undefined>;
  getPopularProducts(): Promise<Product[]>;
  createProduct(product: InsertProduct): Promise<Product>;
  
  // Categories
  getCategories(): Promise<Category[]>;
  getCategory(slug: string): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  
  // Orders
  createOrder(order: InsertOrder): Promise<Order>;
  getOrder(id: number): Promise<Order | undefined>;
  
  // Consultations
  createConsultation(consultation: InsertConsultation): Promise<Consultation>;
}

export class MemStorage implements IStorage {
  private products: Map<number, Product>;
  private categories: Map<number, Category>;
  private orders: Map<number, Order>;
  private consultations: Map<number, Consultation>;
  private currentProductId: number;
  private currentCategoryId: number;
  private currentOrderId: number;
  private currentConsultationId: number;

  constructor() {
    this.products = new Map();
    this.categories = new Map();
    this.orders = new Map();
    this.consultations = new Map();
    this.currentProductId = 1;
    this.currentCategoryId = 1;
    this.currentOrderId = 1;
    this.currentConsultationId = 1;
    
    this.initializeData();
  }

  private initializeData() {
    // Initialize categories - –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    const categoriesData = [
      { name: "–ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "frame-pools", description: "–ü—Ä–æ—á–Ω—ã–µ –∫–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã –¥–ª—è –¥–∞—á–∏", imageUrl: null, productCount: null },
      { name: "–ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "inflatable-pools", description: "–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–µ –Ω–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", imageUrl: null, productCount: null },
      { name: "–ù–∞—Å–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã", slug: "pumps-filters", description: "–°–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ –≤–æ–¥—ã", imageUrl: null, productCount: null },
      { name: "–õ–µ—Å—Ç–Ω–∏—Ü—ã", slug: "ladders", description: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", imageUrl: null, productCount: null },
      { name: "–¢–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∏–ª–∫–∏", slug: "covers-underlays", description: "–ó–∞—â–∏—Ç–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", imageUrl: null, productCount: null },
      { name: "–•–∏–º–∏—è –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", slug: "chemicals", description: "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤–æ–¥—ã", imageUrl: null, productCount: null },
      { name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", slug: "accessories", description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏", imageUrl: null, productCount: null }
    ];

    categoriesData.forEach(cat => {
      const category: Category = { 
        id: this.currentCategoryId++, 
        ...cat
      };
      this.categories.set(category.id, category);
    });

    // Initialize products - –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ basseyn.ru (${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤)
    const productsData = ${JSON.stringify(catalogData.products, null, 2)};

    productsData.forEach(prod => {
      const product: Product = { 
        id: this.currentProductId++, 
        ...prod,
        originalPrice: prod.originalPrice || null,
        brand: prod.brand || null,
        subcategory: prod.subcategory || null,
        volume: prod.volume || null,
        isPopular: prod.isPopular || false,
        isNew: prod.isNew || false,
        discount: prod.discount || 0,
        rating: prod.rating || "4.0",
        reviewCount: prod.reviewCount || 0
      };
      this.products.set(product.id, product);
    });
  }

  async getProducts(filters?: { category?: string; minPrice?: number; maxPrice?: number; inStock?: boolean; search?: string }): Promise<Product[]> {
    let results = Array.from(this.products.values());
    
    if (filters) {
      if (filters.category) {
        results = results.filter(p => p.category === filters.category);
      }
      if (filters.minPrice !== undefined) {
        results = results.filter(p => parseInt(p.price) >= filters.minPrice!);
      }
      if (filters.maxPrice !== undefined) {
        results = results.filter(p => parseInt(p.price) <= filters.maxPrice!);
      }
      if (filters.inStock !== undefined) {
        results = results.filter(p => p.inStock === filters.inStock);
      }
      if (filters.search) {
        const searchLower = filters.search.toLowerCase();
        results = results.filter(p => 
          p.name.toLowerCase().includes(searchLower) ||
          p.description.toLowerCase().includes(searchLower) ||
          (p.brand && p.brand.toLowerCase().includes(searchLower))
        );
      }
    }
    
    return results.sort((a, b) => {
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞
      if (a.isPopular && !b.isPopular) return -1;
      if (!a.isPopular && b.isPopular) return 1;
      
      // –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞ —Å—Ä–µ–¥–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
      if (a.isNew && !b.isNew) return -1;
      if (!a.isNew && b.isNew) return 1;
      
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ ID
      return a.id - b.id;
    });
  }

  async getProduct(id: number): Promise<Product | undefined> {
    return this.products.get(id);
  }

  async getPopularProducts(): Promise<Product[]> {
    return Array.from(this.products.values())
      .filter(p => p.isPopular)
      .sort((a, b) => parseFloat(b.rating) - parseFloat(a.rating))
      .slice(0, 8);
  }

  async createProduct(insertProduct: InsertProduct): Promise<Product> {
    const product: Product = { 
      id: this.currentProductId++, 
      ...insertProduct,
      originalPrice: insertProduct.originalPrice || null,
      brand: insertProduct.brand || null,
      subcategory: insertProduct.subcategory || null,
      volume: insertProduct.volume || null,
      isPopular: insertProduct.isPopular || false,
      isNew: insertProduct.isNew || false,
      discount: insertProduct.discount || 0,
      rating: insertProduct.rating || "4.0",
      reviewCount: insertProduct.reviewCount || 0
    };
    this.products.set(product.id, product);
    return product;
  }

  async getCategories(): Promise<Category[]> {
    return Array.from(this.categories.values());
  }

  async getCategory(slug: string): Promise<Category | undefined> {
    return Array.from(this.categories.values()).find(c => c.slug === slug);
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    const category: Category = { 
      id: this.currentCategoryId++, 
      ...insertCategory,
      description: insertCategory.description || null,
      imageUrl: insertCategory.imageUrl || null,
      productCount: insertCategory.productCount || null
    };
    this.categories.set(category.id, category);
    return category;
  }

  async createOrder(insertOrder: InsertOrder): Promise<Order> {
    const order: Order = { 
      id: this.currentOrderId++, 
      ...insertOrder,
      status: insertOrder.status || "–Ω–æ–≤—ã–π",
      customerEmail: insertOrder.customerEmail || null,
      deliveryAddress: insertOrder.deliveryAddress || null,
      notes: insertOrder.notes || null,
      createdAt: new Date()
    };
    this.orders.set(order.id, order);
    return order;
  }

  async getOrder(id: number): Promise<Order | undefined> {
    return this.orders.get(id);
  }

  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {
    const consultation: Consultation = { 
      id: this.currentConsultationId++, 
      ...insertConsultation,
      message: insertConsultation.message || null,
      status: insertConsultation.status || "–Ω–æ–≤–∞—è",
      email: insertConsultation.email || null,
      createdAt: new Date()
    };
    this.consultations.set(consultation.id, consultation);
    return consultation;
  }
}

export const storage = new MemStorage();`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π storage.ts
fs.writeFileSync('../server/storage.ts', storageTemplate, 'utf-8');
console.log('‚úÖ Storage.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–ª–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤!');
console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–æ ${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
console.log(`üìÇ –°–æ–∑–¥–∞–Ω–æ ${catalogData.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ ${catalogData.brands.length} –±—Ä–µ–Ω–¥–æ–≤`);

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω, —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ä–∞–∑—É