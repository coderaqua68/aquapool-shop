/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 4.0 –¥–æ 5.0 –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç 3 –¥–æ 64
 */

import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";

neonConfig.webSocketConstructor = ws;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const db = drizzle({ client: pool });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç 4.0 –¥–æ 5.0
function generateRandomRating() {
  const ratings = [4.0, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5.0];
  return ratings[Math.floor(Math.random() * ratings.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç 3 –¥–æ 64
function generateRandomReviewCount() {
  return Math.floor(Math.random() * (64 - 3 + 1)) + 3;
}

async function updateRatingsAndReviews() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const result = await db.execute(`
      SELECT id, name FROM products ORDER BY id
    `);
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.rows.length}`);
    
    let updatedCount = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    for (const product of result.rows) {
      const newRating = generateRandomRating();
      const newReviewCount = generateRandomReviewCount();
      
      await pool.query(
        'UPDATE products SET rating = $1, review_count = $2 WHERE id = $3',
        [newRating, newReviewCount, product.id]
      );
      
      updatedCount++;
      console.log(`‚úÖ ${updatedCount}/${result.rows.length}: "${product.name}" - ${newRating}‚≠ê (${newReviewCount} –æ—Ç–∑—ã–≤–æ–≤)`);
    }
    
    console.log(`üéâ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤!`);
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
    console.log(`   ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏: –æ—Ç 4.0 –¥–æ 5.0 –∑–≤—ë–∑–¥`);
    console.log(`   ‚Ä¢ –û—Ç–∑—ã–≤—ã: –æ—Ç 3 –¥–æ 64 –æ—Ç–∑—ã–≤–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
updateRatingsAndReviews();