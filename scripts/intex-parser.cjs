/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ intex-bassein.ru
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ç–æ—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
 */

const fs = require('fs');
const path = require('path');

class IntexParser {
  constructor() {
    this.results = [];
    this.errors = [];
    this.baseUrl = 'https://intex-bassein.ru';
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ URL —Ç–æ–≤–∞—Ä–æ–≤
   */
  async parseProducts(urls) {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ ${urls.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å intex-bassein.ru`);
    
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      console.log(`\nüì¶ –¢–æ–≤–∞—Ä ${i + 1}/${urls.length}`);
      console.log(`üîó ${url}`);
      
      try {
        const productData = await this.parseProductPage(url);
        this.results.push(productData);
        console.log(`‚úÖ "${productData.name}" - –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        this.errors.push({ url, error: error.message });
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(2000);
    }
    
    return this.results;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
   */
  async parseProductPage(url) {
    const html = await this.fetchPage(url);
    return this.extractProductData(html, url);
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async fetchPage(url) {
    try {
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
          'Accept-Encoding': 'gzip, deflate, br',
          'Connection': 'keep-alive'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      return await response.text();
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${error.message}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ HTML
   */
  extractProductData(html, url) {
    // –î–ª—è Node.js –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å jsdom: npm install jsdom
    const { JSDOM } = require('jsdom');
    const dom = new JSDOM(html);
    const document = dom.window.document;

    // 1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const titleElement = document.querySelector('#pagetitle.navigation-title');
    const fullTitle = titleElement ? titleElement.textContent.trim() : '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    
    // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const skuMatch = fullTitle.match(/–∞—Ä—Ç–∏–∫—É–ª\s+(\w+)/i);
    const sku = skuMatch ? skuMatch[1] : this.generateSKU();
    
    // 3. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–¥–ª—è shortDescription)
    const shortSpecs = this.extractShortSpecs(document);
    const shortDescription = this.buildShortDescription(shortSpecs);
    
    // 4. –ü–æ–ª–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const fullSpecs = this.extractFullSpecs(document);
    
    // 5. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = this.extractDescription(document);
    
    // 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const brand = this.getSpecValue(fullSpecs, '–ë—Ä–µ–Ω–¥') || this.determineBrand(fullTitle);
    const category = this.determineCategory(url, fullSpecs);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
    const product = {
      name: fullTitle,
      sku: sku,
      description: description,
      shortDescription: shortDescription,
      price: "0", // –¶–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ
      originalPrice: null,
      category: category,
      brand: brand,
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      volume: this.getSpecValue(fullSpecs, '–û–±—ä–µ–º (–ª)'),
      weight: this.getSpecValue(fullSpecs, '–í–µ—Å (–∫–≥)'),
      dimensions: this.getSpecValue(fullSpecs, '–†–∞–∑–º–µ—Ä—ã (—Å–º)'),
      material: this.getSpecValue(fullSpecs, '–ú–∞—Ç–µ—Ä–∏–∞–ª —á–∞—à–∏'),
      color: this.getSpecValue(fullSpecs, '–¶–≤–µ—Ç —á–∞—à–∏'),
      frameType: this.getSpecValue(fullSpecs, '–ö–∞—Ä–∫–∞—Å'),
      pumpType: this.getSpecValue(fullSpecs, '–ù–∞—Å–æ—Å-—Ñ–∏–ª—å—Ç—Ä'),
      shape: this.getSpecValue(fullSpecs, '–§–æ—Ä–º–∞ –±–∞—Å—Å–µ–π–Ω–∞'),
      installationType: this.getSpecValue(fullSpecs, '–¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏'),
      countryOrigin: this.getSpecValue(fullSpecs, '–°—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      diameter: this.getSpecValue(fullSpecs, '–î–∏–∞–º–µ—Ç—Ä (–º)'),
      height: this.getSpecValue(fullSpecs, '–í—ã—Å–æ—Ç–∞ (–º)'),
      poolType: this.getSpecValue(fullSpecs, '–¢–∏–ø –±–∞—Å—Å–µ–π–Ω–∞'),
      pumpCapacity: this.getSpecValue(fullSpecs, '–ù–∞—Å–æ—Å-—Ñ–∏–ª—å—Ç—Ä (–ª/—á)'),
      packageSize: this.getSpecValue(fullSpecs, '–†–∞–∑–º–µ—Ä —É–ø–∞–∫–æ–≤–∫–∏ (—Å–º)'),
      
      imageUrl: "/api/placeholder/400/400", // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      images: [],
      specifications: JSON.stringify(fullSpecs),
      inStock: true,
      isPopular: false,
      isNew: false,
      discount: 0,
      rating: "4.5",
      reviewCount: Math.floor(Math.random() * 50) + 10,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      sourceUrl: url,
      parsedAt: new Date().toISOString()
    };

    return product;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞)
   */
  extractShortSpecs(document) {
    const specs = {};
    const container = document.querySelector('.product-item-detail-main-properties-container');
    
    if (container) {
      const properties = container.querySelectorAll('.product-item-detail-properties');
      properties.forEach(prop => {
        const nameEl = prop.querySelector('.product-item-detail-properties-name');
        const valEl = prop.querySelector('.product-item-detail-properties-val');
        
        if (nameEl && valEl) {
          const name = nameEl.textContent.trim();
          const value = valEl.textContent.trim();
          specs[name] = value;
        }
      });
    }
    
    return specs;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  extractFullSpecs(document) {
    const specs = {};
    
    // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–ª–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const containers = document.querySelectorAll('.toggle_content .product-item-detail-properties-block');
    
    containers.forEach(container => {
      const properties = container.querySelectorAll('.product-item-detail-properties-group-property');
      
      properties.forEach(prop => {
        const nameEl = prop.querySelector('.product-item-detail-properties-group-property-name');
        const valEl = prop.querySelector('.product-item-detail-properties-group-property-val');
        
        if (nameEl && valEl) {
          const name = nameEl.textContent.trim();
          let value = valEl.textContent.trim();
          
          // –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π
          const linkEl = valEl.querySelector('a');
          if (linkEl) {
            value = linkEl.textContent.trim();
          }
          
          specs[name] = value;
        }
      });
    });
    
    return specs;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
   */
  extractDescription(document) {
    const descContainer = document.querySelector('.toggle_content');
    
    if (descContainer) {
      // –£–±–∏—Ä–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
      const clone = descContainer.cloneNode(true);
      const propsBlocks = clone.querySelectorAll('.product-item-detail-properties-block');
      propsBlocks.forEach(block => block.remove());
      
      // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π HTML –æ–ø–∏—Å–∞–Ω–∏—è
      let description = clone.innerHTML;
      
      // –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
      description = description
        .replace(/\s+/g, ' ')
        .replace(/>\s+</g, '><')
        .trim();
      
      return description;
    }
    
    return '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  buildShortDescription(specs) {
    const important = ['–î–∏–∞–º–µ—Ç—Ä (–º)', '–í—ã—Å–æ—Ç–∞ (–º)', '–û–±—ä–µ–º (–ª)', '–ú–∞—Ç–µ—Ä–∏–∞–ª —á–∞—à–∏'];
    const parts = [];
    
    important.forEach(key => {
      if (specs[key]) {
        const shortKey = key.replace(/\s*\([^)]*\)/, ''); // –£–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        parts.push(`${shortKey}: ${specs[key]}`);
      }
    });
    
    return parts.join(' ‚Ä¢ ');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
   */
  getSpecValue(specs, key) {
    return specs[key] || null;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  determineCategory(url, specs) {
    const urlLower = url.toLowerCase();
    const poolType = specs['–¢–∏–ø –±–∞—Å—Å–µ–π–Ω–∞'];
    
    if (urlLower.includes('karkasnye') || poolType === '–ö–∞—Ä–∫–∞—Å–Ω—ã–π') {
      return 'frame-pools';
    }
    if (urlLower.includes('naduvnye') || poolType === '–ù–∞–¥—É–≤–Ω–æ–π') {
      return 'inflatable-pools';
    }
    if (urlLower.includes('detskie')) {
      return 'inflatable-pools';
    }
    if (urlLower.includes('nasos') || urlLower.includes('filter')) {
      return 'pumps-filters';
    }
    if (urlLower.includes('himiya') || urlLower.includes('chemical')) {
      return 'chemicals';
    }
    
    return 'frame-pools';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
   */
  determineBrand(title) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('bestway')) return 'Bestway';
    if (titleLower.includes('intex')) return 'Intex';
    if (titleLower.includes('summer waves')) return 'Summer Waves';
    if (titleLower.includes('jilong')) return 'Jilong';
    
    return null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU
   */
  generateSKU() {
    return `AUTO-${Date.now().toString().slice(-6)}`;
  }

  /**
   * –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async saveResults(filename = 'intex-parsed-products.json') {
    const outputPath = path.join(__dirname, filename);
    
    const output = {
      site: 'intex-bassein.ru',
      summary: {
        total: this.results.length + this.errors.length,
        success: this.results.length,
        errors: this.errors.length,
        timestamp: new Date().toISOString()
      },
      products: this.results,
      errors: this.errors
    };
    
    fs.writeFileSync(outputPath, JSON.stringify(output, null, 2), 'utf8');
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${outputPath}`);
    
    return outputPath;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ storage.ts
   */
  generateStorageCode() {
    if (this.results.length === 0) {
      return "// –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏";
    }

    let code = "// –¢–æ–≤–∞—Ä—ã, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å intex-bassein.ru\n";
    code += "const importedProducts = [\n";
    
    this.results.forEach((product, index) => {
      code += "  {\n";
      Object.entries(product).forEach(([key, value]) => {
        if (['sourceUrl', 'parsedAt'].includes(key)) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
        
        if (typeof value === 'string') {
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
          const escaped = value.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n');
          code += `    ${key}: "${escaped}",\n`;
        } else if (value === null) {
          code += `    ${key}: null,\n`;
        } else {
          code += `    ${key}: ${JSON.stringify(value)},\n`;
        }
      });
      code += `  }${index < this.results.length - 1 ? ',' : ''}\n`;
    });
    
    code += "];\n\n";
    code += "// –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä MemStorage –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:\n";
    code += "importedProducts.forEach(prod => {\n";
    code += "  const product: Product = { id: this.currentProductId++, ...prod };\n";
    code += "  this.products.set(product.id, product);\n";
    code += "});\n";
    
    return code;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
async function parseIntexProducts() {
  const parser = new IntexParser();
  
  // –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–®–ò URL –¢–û–í–ê–†–û–í
  const urls = [
    "https://intex-bassein.ru/catalog/bestway-karkasnye-basseyny/karkasnyy-basseyn-bestway-round-steel-pro-max-krug-3-66-x-1-22-m-artikul-56420/",
    // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ URL —Ç–æ–≤–∞—Ä–æ–≤
  ];
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ intex-bassein.ru\n');
    
    await parser.parseProducts(urls);
    
    await parser.saveResults();
    
    const storageCode = parser.generateStorageCode();
    fs.writeFileSync(path.join(__dirname, 'generated-storage-code.js'), storageCode, 'utf8');
    
    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${parser.results.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${parser.errors.length}`);
    console.log(`üìÅ –§–∞–π–ª—ã: intex-parsed-products.json, generated-storage-code.js`);
    
    if (parser.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      parser.errors.forEach(error => {
        console.log(`  ${error.url}: ${error.error}`);
      });
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

module.exports = IntexParser;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  parseIntexProducts();
}