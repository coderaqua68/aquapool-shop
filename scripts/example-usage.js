/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ intex-bassein.ru
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
 */

const IntexParser = require('./intex-parser');
const fs = require('fs');
const path = require('path');

async function runParser() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ intex-bassein.ru\n');
  
  const parser = new IntexParser();
  
  // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–®–ò URL –¢–û–í–ê–†–û–í
  const productUrls = [
    "https://intex-bassein.ru/catalog/bestway-karkasnye-basseyny/karkasnyy-basseyn-bestway-round-steel-pro-max-krug-3-66-x-1-22-m-artikul-56420/",
    // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ URL –∑–¥–µ—Å—å...
    // "https://intex-bassein.ru/catalog/another-product/",
    // "https://intex-bassein.ru/catalog/yet-another-product/",
  ];
  
  if (productUrls.length === 1 && productUrls[0].includes('56420')) {
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π URL!');
    console.log('üìù –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª example-usage.js –∏ –∑–∞–º–µ–Ω–∏—Ç–µ URL –Ω–∞ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã\n');
  }
  
  try {
    console.log(`üìã –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productUrls.length}`);
    console.log('‚è±Ô∏è  –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ~${productUrls.length * 2} —Å–µ–∫—É–Ω–¥\n');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    const products = await parser.parseProducts(productUrls);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultsFile = await parser.saveResults('parsed-products.json');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è storage.ts
    const storageCode = parser.generateStorageCode();
    const codeFile = path.join(__dirname, 'storage-import-code.js');
    fs.writeFileSync(codeFile, storageCode, 'utf8');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JSON –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API
    const importJson = products.map(p => {
      const { sourceUrl, parsedAt, ...productData } = p;
      return productData;
    });
    const importFile = path.join(__dirname, 'products-for-import.json');
    fs.writeFileSync(importFile, JSON.stringify(importJson, null, 2), 'utf8');
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${parser.errors.length}`);
    console.log('\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    console.log(`  ‚Ä¢ ${resultsFile} - –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`);
    console.log(`  ‚Ä¢ ${codeFile} - –ö–æ–¥ –¥–ª—è storage.ts`);
    console.log(`  ‚Ä¢ ${importFile} - JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
    
    if (parser.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:');
      parser.errors.forEach((error, index) => {
        console.log(`  ${index + 1}. ${error.url}`);
        console.log(`     ${error.error}`);
      });
    }
    
    console.log('\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
    console.log('  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª parsed-products.json');
    console.log('  2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ storage-import-code.js');
    console.log('  3. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –≤ server/storage.ts –º–µ—Ç–æ–¥ initializeData()');
    console.log('  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
    console.log('  5. –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.error('  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    console.error('  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL —Ç–æ–≤–∞—Ä–æ–≤');
    console.error('  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ intex-bassein.ru');
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runParser();
}

module.exports = runParser;