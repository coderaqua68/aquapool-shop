import fetch from 'node-fetch';

const bestwayPriceUpdates = {
  "5614A": { price: 18750, originalPrice: 22500 },
  "5611Z": { price: 69000, originalPrice: 75000 },
  "56462": { price: 39750, originalPrice: 45000 },
  "5612X": { price: 27750, originalPrice: 37500 },
  "5612Z": { price: 32250, originalPrice: 45000 },
  "15427": { price: 23250, originalPrice: 30000 },
  "56438": { price: 25500, originalPrice: 33750 },
  "56442": { price: 30000, originalPrice: 37500 },
  "56629": { price: 18750, originalPrice: 22500 },
  "561JZ": { price: 66000, originalPrice: 97500 },
  "561KE": { price: 61500, originalPrice: 90000 },
  "56722": { price: 31500, originalPrice: 41250 },
  "561KJ": { price: 112500, originalPrice: 150000 },
  "56466": { price: 52500, originalPrice: 67500 },
  "5612B": { price: 67500, originalPrice: 90000 },
  "56721": { price: 27000, originalPrice: 37500 },
  "56620": { price: 28500, originalPrice: 37500 },
  "56709": { price: 15000, originalPrice: 22500 },
  "56457": { price: 33750, originalPrice: 45000 },
  "56671": { price: 42000, originalPrice: 52500 },
  "56670": { price: 37500, originalPrice: 52500 },
  "56418": { price: 14250, originalPrice: 18750 },
  "56456": { price: 31500, originalPrice: 37500 },
  "56420": { price: 19500, originalPrice: 26250 }
};

async function bestwayPriceUpdate() {
  console.log('\nüî• === –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–ï–ù BESTWAY ===\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
  const productsResponse = await fetch('http://localhost:5000/api/products');
  const products = await productsResponse.json();
  
  const existingSkus = products.map(p => p.sku);
  console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${existingSkus.length}`);
  console.log(`üè∑ –¢–æ–≤–∞—Ä–æ–≤ Bestway –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ: ${Object.keys(bestwayPriceUpdates).length}`);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authToken = 'Basic ' + Buffer.from('admin:aquapool2025').toString('base64');
  
  let foundInDB = 0;
  let notFoundInDB = 0;
  let successfulUpdates = 0;
  let failedUpdates = 0;
  
  const foundProducts = [];
  const notFoundProducts = [];
  const updateErrors = [];
  
  console.log('\nüîç === –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í BESTWAY ===\n');
  
  for (const [sku, priceData] of Object.entries(bestwayPriceUpdates)) {
    if (!existingSkus.includes(sku)) {
      console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ: –∞—Ä—Ç–∏–∫—É–ª ${sku}`);
      notFoundInDB++;
      notFoundProducts.push(sku);
      continue;
    }
    
    console.log(`‚úÖ –ù–ê–ô–î–ï–ù –≤ –±–∞–∑–µ: –∞—Ä—Ç–∏–∫—É–ª ${sku}`);
    foundInDB++;
    foundProducts.push(sku);
  }
  
  console.log('\nüí∞ === –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–ï–ù BESTWAY ===\n');
  
  for (const sku of foundProducts) {
    const priceData = bestwayPriceUpdates[sku];
    
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ${sku}: ${priceData.price}‚ÇΩ (–±—ã–ª–æ ${priceData.originalPrice}‚ÇΩ)`);
      
      const response = await fetch('http://localhost:5000/api/admin/products/update-price', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': authToken
        },
        body: JSON.stringify({
          sku: sku,
          price: priceData.price,
          originalPrice: priceData.originalPrice
        })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        console.log(`‚úÖ –£–°–ü–ï–®–ù–û –æ–±–Ω–æ–≤–ª–µ–Ω: ${sku}`);
        successfulUpdates++;
      } else {
        console.log(`‚ùå –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${sku}: ${result.message}`);
        failedUpdates++;
        updateErrors.push({ sku, error: result.message });
      }
    } catch (error) {
      console.error(`üí• –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${sku}:`, error.message);
      failedUpdates++;
      updateErrors.push({ sku, error: error.message });
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 200));
  }
  
  console.log('\nüìä === –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ BESTWAY ===\n');
  console.log(`üè∑ –¢–æ–≤–∞—Ä–æ–≤ Bestway –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ: ${Object.keys(bestwayPriceUpdates).length}`);
  console.log(`üóÉ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${existingSkus.length}`);
  console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û –≤ –±–∞–∑–µ: ${foundInDB} —Ç–æ–≤–∞—Ä–æ–≤`);
  console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –≤ –±–∞–∑–µ: ${notFoundInDB} —Ç–æ–≤–∞—Ä–æ–≤`);
  console.log(`üí∞ –£–°–ü–ï–®–ù–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successfulUpdates} —Ç–æ–≤–∞—Ä–æ–≤`);
  console.log(`‚ö†Ô∏è –û–®–ò–ë–ö–ò –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${failedUpdates} —Ç–æ–≤–∞—Ä–æ–≤`);
  
  if (notFoundProducts.length > 0) {
    console.log('\n‚ùå === –ù–ï –ù–ê–ô–î–ï–ù–´ –í –ë–ê–ó–ï ===');
    notFoundProducts.forEach(sku => {
      console.log(`   - –ê—Ä—Ç–∏–∫—É–ª: ${sku}`);
    });
  }
  
  if (updateErrors.length > 0) {
    console.log('\n‚ö†Ô∏è === –û–®–ò–ë–ö–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===');
    updateErrors.forEach(error => {
      console.log(`   - –ê—Ä—Ç–∏–∫—É–ª ${error.sku}: ${error.error}`);
    });
  }
  
  console.log('\nüéØ === –ò–¢–û–ì BESTWAY ===');
  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successfulUpdates}/${foundInDB} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
  if (successfulUpdates === foundInDB && notFoundInDB === 0) {
    console.log('üéâ –í–°–ï –¢–û–í–ê–†–´ BESTWAY –£–°–ü–ï–®–ù–û –ù–ê–ô–î–ï–ù–´ –ò –û–ë–ù–û–í–õ–ï–ù–´!');
  } else if (successfulUpdates === foundInDB) {
    console.log('‚ö†Ô∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã Bestway –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ');
  } else {
    console.log('‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ Bestway');
  }
}

bestwayPriceUpdate().catch(console.error);