import fs from 'fs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
const catalogData = JSON.parse(fs.readFileSync('./full-catalog-processed.json', 'utf-8'));

console.log(`üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è ${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤...`);

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function determineCategory(name, manufacturer) {
  const nameL = name.toLowerCase();
  const manL = (manufacturer || '').toLowerCase();
  
  // –ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
  if (nameL.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π –±–∞—Å—Å–µ–π–Ω') || 
      nameL.includes('–∫–∞—Ä–∫–∞—Å–Ω–æ–≥–æ –±–∞—Å—Å–µ–π–Ω–∞') ||
      nameL.includes('ultra frame') ||
      nameL.includes('prism frame') ||
      nameL.includes('steel pro') ||
      nameL.includes('metal frame') ||
      (nameL.includes('–±–∞—Å—Å–µ–π–Ω') && (nameL.includes('–∫–∞—Ä–∫–∞—Å') || nameL.includes('frame')))) {
    return 'frame-pools';
  }
  
  // –ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
  if (nameL.includes('–Ω–∞–¥—É–≤–Ω–æ–π –±–∞—Å—Å–µ–π–Ω') ||
      nameL.includes('fast set') ||
      nameL.includes('easy set') ||
      nameL.includes('snap set') ||
      (nameL.includes('–±–∞—Å—Å–µ–π–Ω') && (nameL.includes('–Ω–∞–¥—É–≤–Ω') || nameL.includes('inflat')))) {
    return 'inflatable-pools';
  }
  
  // –ù–∞—Å–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã
  if (nameL.includes('–Ω–∞—Å–æ—Å') || 
      nameL.includes('—Ñ–∏–ª—å—Ç—Ä') ||
      nameL.includes('—Å–∫–∏–º–º–µ—Ä') ||
      nameL.includes('pump') ||
      nameL.includes('filter') ||
      nameL.includes('–∫–∞—Ä—Ç—Ä–∏–¥–∂') ||
      nameL.includes('cartridge')) {
    return 'pumps-filters';
  }
  
  // –õ–µ—Å—Ç–Ω–∏—Ü—ã
  if (nameL.includes('–ª–µ—Å—Ç–Ω–∏—Ü–∞') ||
      nameL.includes('ladder') ||
      nameL.includes('—Å—Ç—É–ø–µ–Ω')) {
    return 'ladders';
  }
  
  // –¢–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∏–ª–∫–∏
  if (nameL.includes('—Ç–µ–Ω—Ç') ||
      nameL.includes('–ø–æ–∫—Ä—ã–≤–∞–ª–æ') ||
      nameL.includes('–ø–æ–¥—Å—Ç–∏–ª–∫–∞') ||
      nameL.includes('cover') ||
      nameL.includes('mat') ||
      nameL.includes('cloth') ||
      nameL.includes('carpet')) {
    return 'covers-underlays';
  }
  
  // –•–∏–º–∏—è –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤
  if (nameL.includes('—Ö–∏–º–∏—è') ||
      nameL.includes('—Ö–ª–æ—Ä') ||
      nameL.includes('–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü') ||
      nameL.includes('–∞–ª—å–≥–∏—Ü–∏–¥') ||
      nameL.includes('ph') ||
      nameL.includes('—Ç–µ—Å—Ç') ||
      nameL.includes('—Ä–µ–∞–≥–µ–Ω—Ç') ||
      nameL.includes('chemical')) {
    return 'chemicals';
  }
  
  // –ß–∞—à–∏ –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤
  if (nameL.includes('—á–∞—à–∞') || nameL.includes('liner')) {
    return 'accessories';
  }
  
  // –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
  if (nameL.includes('–∫–æ–º–ø–ª–µ–∫—Ç') ||
      nameL.includes('–Ω–∞–±–æ—Ä') ||
      nameL.includes('–∞–∫—Å–µ—Å—Å—É–∞—Ä') ||
      nameL.includes('–∑–∞–ø—á–∞—Å—Ç') ||
      nameL.includes('—Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª') ||
      nameL.includes('–∫—Ä–µ–ø–µ–∂') ||
      nameL.includes('—Ö–æ–º—É—Ç') ||
      nameL.includes('–∫–ª–∞–ø–∞–Ω') ||
      nameL.includes('–∑–∞–≥–ª—É—à–∫–∞') ||
      nameL.includes('–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫')) {
    return 'accessories';
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
  return 'accessories';
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
const beforeStats = {};
catalogData.products.forEach(p => {
  if (!beforeStats[p.category]) beforeStats[p.category] = 0;
  beforeStats[p.category]++;
});

console.log('–î–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
Object.entries(beforeStats).forEach(([cat, count]) => {
  console.log(`${cat}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
});

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
let changedCount = 0;
catalogData.products.forEach(product => {
  const oldCategory = product.category;
  const newCategory = determineCategory(product.name, product.brand);
  
  if (oldCategory !== newCategory) {
    product.category = newCategory;
    changedCount++;
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
const afterStats = {};
catalogData.products.forEach(p => {
  if (!afterStats[p.category]) afterStats[p.category] = 0;
  afterStats[p.category]++;
});

console.log('\n–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
Object.entries(afterStats).sort((a,b) => b[1] - a[1]).forEach(([cat, count]) => {
  console.log(`${cat}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
});

console.log(`\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${changedCount} —Ç–æ–≤–∞—Ä–æ–≤`);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
fs.writeFileSync('./full-catalog-fixed.json', JSON.stringify(catalogData, null, 2), 'utf-8');
console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏');

// –û–±–Ω–æ–≤–ª—è–µ–º storage.ts
const storageTemplate = `import { 
  Product, InsertProduct, 
  Category, InsertCategory, 
  Order, InsertOrder, 
  Consultation, InsertConsultation 
} from "@shared/schema";

export interface IStorage {
  // Products
  getProducts(filters?: { category?: string; minPrice?: number; maxPrice?: number; inStock?: boolean; search?: string }): Promise<Product[]>;
  getProduct(id: number): Promise<Product | undefined>;
  getPopularProducts(): Promise<Product[]>;
  createProduct(product: InsertProduct): Promise<Product>;
  
  // Categories
  getCategories(): Promise<Category[]>;
  getCategory(slug: string): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  
  // Orders
  createOrder(order: InsertOrder): Promise<Order>;
  getOrder(id: number): Promise<Order | undefined>;
  
  // Consultations
  createConsultation(consultation: InsertConsultation): Promise<Consultation>;
}

export class MemStorage implements IStorage {
  private products: Map<number, Product>;
  private categories: Map<number, Category>;
  private orders: Map<number, Order>;
  private consultations: Map<number, Consultation>;
  private currentProductId: number;
  private currentCategoryId: number;
  private currentOrderId: number;
  private currentConsultationId: number;

  constructor() {
    this.products = new Map();
    this.categories = new Map();
    this.orders = new Map();
    this.consultations = new Map();
    this.currentProductId = 1;
    this.currentCategoryId = 1;
    this.currentOrderId = 1;
    this.currentConsultationId = 1;
    
    this.initializeData();
  }

  private initializeData() {
    // Initialize categories
    const categoriesData = [
      { name: "–ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "frame-pools", description: "–ü—Ä–æ—á–Ω—ã–µ –∫–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã –¥–ª—è –¥–∞—á–∏", imageUrl: null, productCount: null },
      { name: "–ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "inflatable-pools", description: "–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–µ –Ω–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", imageUrl: null, productCount: null },
      { name: "–ù–∞—Å–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã", slug: "pumps-filters", description: "–°–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ –≤–æ–¥—ã", imageUrl: null, productCount: null },  
      { name: "–õ–µ—Å—Ç–Ω–∏—Ü—ã", slug: "ladders", description: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", imageUrl: null, productCount: null },
      { name: "–¢–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∏–ª–∫–∏", slug: "covers-underlays", description: "–ó–∞—â–∏—Ç–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", imageUrl: null, productCount: null },
      { name: "–•–∏–º–∏—è –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", slug: "chemicals", description: "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤–æ–¥—ã", imageUrl: null, productCount: null },
      { name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", slug: "accessories", description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏", imageUrl: null, productCount: null }
    ];

    categoriesData.forEach(cat => {
      const category: Category = { 
        id: this.currentCategoryId++, 
        ...cat
      };
      this.categories.set(category.id, category);
    });

    // Initialize products - –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤)
    const productsData = ${JSON.stringify(catalogData.products, null, 2)};

    productsData.forEach(prod => {
      const product: Product = { 
        id: this.currentProductId++, 
        ...prod,
        originalPrice: prod.originalPrice || null,
        brand: prod.brand || null,
        subcategory: prod.subcategory || null,
        volume: prod.volume || null,
        images: prod.images || null,
        inStock: prod.inStock !== undefined ? prod.inStock : true,
        isPopular: prod.isPopular || false,
        isNew: prod.isNew || false,
        discount: prod.discount || 0,
        rating: prod.rating || "4.0",
        reviewCount: prod.reviewCount || 0
      };
      this.products.set(product.id, product);
    });
  }

  async getProducts(filters?: { category?: string; minPrice?: number; maxPrice?: number; inStock?: boolean; search?: string }): Promise<Product[]> {
    let results = Array.from(this.products.values());
    
    if (filters) {
      if (filters.category) {
        results = results.filter(p => p.category === filters.category);
      }
      if (filters.minPrice !== undefined) {
        results = results.filter(p => parseInt(p.price) >= filters.minPrice!);
      }
      if (filters.maxPrice !== undefined) {
        results = results.filter(p => parseInt(p.price) <= filters.maxPrice!);
      }
      if (filters.inStock !== undefined) {
        results = results.filter(p => p.inStock === filters.inStock);
      }
      if (filters.search) {
        const searchLower = filters.search.toLowerCase();
        results = results.filter(p => 
          p.name.toLowerCase().includes(searchLower) ||
          p.description.toLowerCase().includes(searchLower) ||
          (p.brand && p.brand.toLowerCase().includes(searchLower))
        );
      }
    }
    
    return results.sort((a, b) => {
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞
      if (a.isPopular && !b.isPopular) return -1;
      if (!a.isPopular && b.isPopular) return 1;
      
      // –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞ —Å—Ä–µ–¥–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
      if (a.isNew && !b.isNew) return -1;
      if (!a.isNew && b.isNew) return 1;
      
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ ID
      return a.id - b.id;
    });
  }

  async getProduct(id: number): Promise<Product | undefined> {
    return this.products.get(id);
  }

  async getPopularProducts(): Promise<Product[]> {
    return Array.from(this.products.values())
      .filter(p => p.isPopular)
      .sort((a, b) => parseFloat(b.rating || "0") - parseFloat(a.rating || "0"))
      .slice(0, 8);
  }

  async createProduct(insertProduct: InsertProduct): Promise<Product> {
    const product: Product = { 
      id: this.currentProductId++, 
      ...insertProduct,
      originalPrice: insertProduct.originalPrice || null,
      brand: insertProduct.brand || null,
      subcategory: insertProduct.subcategory || null,
      volume: insertProduct.volume || null,
      images: insertProduct.images || null,
      inStock: insertProduct.inStock !== undefined ? insertProduct.inStock : true,
      isPopular: insertProduct.isPopular || false,
      isNew: insertProduct.isNew || false,
      discount: insertProduct.discount || 0,
      rating: insertProduct.rating || "4.0",
      reviewCount: insertProduct.reviewCount || 0
    };
    this.products.set(product.id, product);
    return product;
  }

  async getCategories(): Promise<Category[]> {
    return Array.from(this.categories.values());
  }

  async getCategory(slug: string): Promise<Category | undefined> {
    return Array.from(this.categories.values()).find(c => c.slug === slug);
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    const category: Category = { 
      id: this.currentCategoryId++, 
      ...insertCategory,
      description: insertCategory.description || null,
      imageUrl: insertCategory.imageUrl || null,
      productCount: insertCategory.productCount || null
    };
    this.categories.set(category.id, category);
    return category;
  }

  async createOrder(insertOrder: InsertOrder): Promise<Order> {
    const order: Order = { 
      id: this.currentOrderId++, 
      ...insertOrder,
      status: insertOrder.status || "–Ω–æ–≤—ã–π",
      customerEmail: insertOrder.customerEmail || null,
      deliveryAddress: insertOrder.deliveryAddress || null,
      notes: insertOrder.notes || null,
      createdAt: new Date()
    };
    this.orders.set(order.id, order);
    return order;
  }

  async getOrder(id: number): Promise<Order | undefined> {
    return this.orders.get(id);
  }

  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {
    const consultation: Consultation = { 
      id: this.currentConsultationId++, 
      ...insertConsultation,
      message: insertConsultation.message || null,
      status: "–Ω–æ–≤–∞—è",
      email: insertConsultation.email || null,
      createdAt: new Date()
    };
    this.consultations.set(consultation.id, consultation);
    return consultation;
  }
}

export const storage = new MemStorage();`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π storage.ts
fs.writeFileSync('../server/storage.ts', storageTemplate, 'utf-8');
console.log('‚úÖ Storage.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤!');