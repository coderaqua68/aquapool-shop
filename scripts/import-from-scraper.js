// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ –ø–∞—Ä—Å–µ—Ä–∞ –≤ storage.ts
const fs = require('fs');
const path = require('path');

class ProductImporter {
  constructor() {
    this.processedProducts = [];
    this.categoryMapping = {
      'frame-pools': 'frame-pools',
      'inflatable-pools': 'inflatable-pools', 
      'pumps-filters': 'pumps-filters',
      'ladders': 'ladders',
      'covers-underlays': 'covers-underlays',
      'chemicals': 'chemicals',
      'accessories': 'accessories'
    };
  }

  async importFromJson(jsonFilePath) {
    console.log('üîÑ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞...');
    
    if (!fs.existsSync(jsonFilePath)) {
      throw new Error(`–§–∞–π–ª ${jsonFilePath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    const rawData = fs.readFileSync(jsonFilePath, 'utf8');
    const data = JSON.parse(rawData);
    
    if (!data.products || !Array.isArray(data.products)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ products');
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ: ${data.products.length}`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
    data.products.forEach((product, index) => {
      try {
        const processedProduct = this.processProduct(product, index);
        if (processedProduct) {
          this.processedProducts.push(processedProduct);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${index + 1}: ${error.message}`);
      }
    });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${this.processedProducts.length}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ storage.ts
    this.generateStorageCode();
    
    return this.processedProducts;
  }

  processProduct(product, index) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!product.name || !product.price) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, price)');
    }

    // –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const name = this.cleanText(product.name);
    const price = this.extractPrice(product.price);
    const originalPrice = product.originalPrice ? this.extractPrice(product.originalPrice) : null;
    
    if (!price || parseInt(price) <= 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥
    const brand = this.determineBrand(name);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const { category, subcategory } = this.determineCategory(product.category, name, brand);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º
    const volume = this.extractVolume(name);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specifications = this.generateSpecifications(product, name, brand);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageUrl = this.processImageUrl(product.imageUrl);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    const discount = originalPrice && price ? 
      Math.round((1 - parseInt(price) / parseInt(originalPrice)) * 100) : 0;

    return {
      name: name,
      description: `${brand} - ${name}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.`,
      price: price,
      originalPrice: originalPrice,
      category: category,
      subcategory: subcategory,
      brand: brand,
      volume: volume,
      imageUrl: imageUrl,
      images: [imageUrl].filter(Boolean),
      specifications: JSON.stringify(specifications),
      inStock: true,
      isPopular: index < 5, // –ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
      isNew: index < 3, // –ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–æ–≤—ã–µ
      discount: discount,
      rating: (4.0 + Math.random() * 1.0).toFixed(1),
      reviewCount: Math.floor(Math.random() * 50) + 5
    };
  }

  cleanText(text) {
    return text.trim()
               .replace(/\s+/g, ' ')
               .replace(/[""¬´¬ª]/g, '"')
               .replace(/'/g, "'");
  }

  extractPrice(priceText) {
    if (!priceText) return '';
    const match = priceText.toString().match(/\d+/);
    return match ? match[0] : '';
  }

  determineBrand(name) {
    const nameLower = name.toLowerCase();
    
    if (nameLower.includes('intex')) return 'Intex';
    if (nameLower.includes('bestway')) return 'Bestway';
    if (nameLower.includes('jilong')) return 'Jilong';
    if (nameLower.includes('laguna')) return 'Laguna';
    if (nameLower.includes('–º–∞—Ä–∫–æ–ø—É–ª')) return '–ú–∞—Ä–∫–æ–ø—É–ª';
    if (nameLower.includes('summer fun')) return 'Summer Fun';
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
  }

  determineCategory(originalCategory, name, brand) {
    const nameLower = name.toLowerCase();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let category = 'accessories';
    let subcategory = null;

    if (nameLower.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π') || nameLower.includes('frame')) {
      category = 'frame-pools';
      
      // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö –±–∞—Å—Å–µ–π–Ω–æ–≤
      if (brand === 'Intex') {
        if (nameLower.includes('ultra') || nameLower.includes('xtr')) {
          subcategory = 'ultra-frame-xtr';
        } else if (nameLower.includes('prism')) {
          subcategory = 'prism-frame';
        } else if (nameLower.includes('metal frame')) {
          subcategory = 'metal-frame';
        }
      } else if (brand === 'Bestway') {
        if (nameLower.includes('power steel')) {
          subcategory = 'power-steel';
        } else if (nameLower.includes('steel pro')) {
          subcategory = 'steel-pro-max';
        }
      }
    } else if (nameLower.includes('–Ω–∞–¥—É–≤–Ω–æ–π') || nameLower.includes('easy set') || nameLower.includes('fast set')) {
      category = 'inflatable-pools';
      
      if (nameLower.includes('easy set')) {
        subcategory = 'easy-set';
      } else if (nameLower.includes('fast set')) {
        subcategory = 'fast-set';
      }
    } else if (nameLower.includes('–Ω–∞—Å–æ—Å') || nameLower.includes('—Ñ–∏–ª—å—Ç—Ä') || nameLower.includes('filter') || nameLower.includes('pump')) {
      category = 'pumps-filters';
      
      if (nameLower.includes('–ø–µ—Å–æ—á–Ω—ã–π') || nameLower.includes('sand')) {
        subcategory = 'sand-filters';
      } else if (nameLower.includes('–∫–∞—Ä—Ç—Ä–∏–¥–∂') || nameLower.includes('cartridge')) {
        subcategory = 'cartridge-filters';
      }
    } else if (nameLower.includes('–ª–µ—Å—Ç–Ω–∏—Ü') || nameLower.includes('ladder')) {
      category = 'ladders';
    } else if (nameLower.includes('—Ç–µ–Ω—Ç') || nameLower.includes('–ø–æ–∫—Ä—ã—Ç') || nameLower.includes('–ø–æ–¥—Å—Ç–∏–ª–∫') || nameLower.includes('cover')) {
      category = 'covers-underlays';
      
      if (nameLower.includes('—Å–æ–ª–Ω–µ—á') || nameLower.includes('solar')) {
        subcategory = 'solar-covers';
      } else if (nameLower.includes('–ø–æ–¥—Å—Ç–∏–ª–∫') || nameLower.includes('ground')) {
        subcategory = 'ground-cloths';
      }
    } else if (nameLower.includes('—Ö–∏–º–∏—è') || nameLower.includes('—Ö–ª–æ—Ä') || nameLower.includes('ph') || nameLower.includes('—Ö–∏–º–∏—á')) {
      category = 'chemicals';
      
      if (nameLower.includes('–Ω–∞–±–æ—Ä') || nameLower.includes('—Å—Ç–∞—Ä—Ç–æ–≤')) {
        subcategory = 'starter-kits';
      } else if (nameLower.includes('—Ö–ª–æ—Ä')) {
        subcategory = 'chlorine';
      }
    }

    return { category, subcategory };
  }

  extractVolume(name) {
    const volumeMatch = name.match(/(\d+)\s*–ª/i);
    return volumeMatch ? `${volumeMatch[1]}–ª` : null;
  }

  generateSpecifications(product, name, brand) {
    const specs = {};
    
    // –†–∞–∑–º–µ—Ä—ã
    const sizeMatch = name.match(/(\d+)—Ö(\d+)(?:—Ö(\d+))?/i);
    if (sizeMatch) {
      if (sizeMatch[3]) {
        specs['–†–∞–∑–º–µ—Ä'] = `${sizeMatch[1]}x${sizeMatch[2]}x${sizeMatch[3]} —Å–º`;
      } else {
        specs['–î–∏–∞–º–µ—Ç—Ä'] = `${sizeMatch[1]} —Å–º`;
        specs['–í—ã—Å–æ—Ç–∞'] = `${sizeMatch[2]} —Å–º`;
      }
    }
    
    // –û–±—ä–µ–º
    const volume = this.extractVolume(name);
    if (volume) {
      specs['–û–±—ä–µ–º'] = volume;
    }
    
    // –ê—Ä—Ç–∏–∫—É–ª
    if (product.article) {
      specs['–ê—Ä—Ç–∏–∫—É–ª'] = product.article;
    }
    
    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –±—Ä–µ–Ω–¥—É
    if (brand === 'Intex') {
      specs['–ú–∞—Ç–µ—Ä–∏–∞–ª'] = '–ü–í–• Super-Tough';
      specs['–ì–∞—Ä–∞–Ω—Ç–∏—è'] = '1 –≥–æ–¥';
      specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'] = 'Intex Corp';
    } else if (brand === 'Bestway') {
      specs['–ú–∞—Ç–µ—Ä–∏–∞–ª'] = 'TriTech 3-—Å–ª–æ—è';
      specs['–ì–∞—Ä–∞–Ω—Ç–∏—è'] = '2 –≥–æ–¥–∞';
      specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'] = 'Bestway Corp';
    }
    
    return specs;
  }

  processImageUrl(imageUrl) {
    if (!imageUrl) {
      return "https://images.unsplash.com/photo-1544551763-46a013bb70d5";
    }
    
    // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
    if (imageUrl.startsWith('/')) {
      return `https://intex-bassein.ru${imageUrl}`;
    }
    
    return imageUrl;
  }

  generateStorageCode() {
    const codeLines = this.processedProducts.map((product, index) => {
      return `      {
        name: "${product.name}",
        description: "${product.description}",
        price: "${product.price}",
        originalPrice: ${product.originalPrice ? `"${product.originalPrice}"` : 'null'},
        category: "${product.category}",
        subcategory: ${product.subcategory ? `"${product.subcategory}"` : 'null'},
        brand: "${product.brand}",
        volume: ${product.volume ? `"${product.volume}"` : 'null'},
        imageUrl: "${product.imageUrl}",
        images: ${JSON.stringify(product.images)},
        specifications: JSON.stringify(${JSON.stringify(JSON.parse(product.specifications))}),
        inStock: ${product.inStock},
        isPopular: ${product.isPopular},
        isNew: ${product.isNew},
        discount: ${product.discount},
        rating: "${product.rating}",
        reviewCount: ${product.reviewCount}
      }${index < this.processedProducts.length - 1 ? ',' : ''}`;
    });

    const fullCode = `// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞—Å—Å–∏–≤ productsData –≤ —Ñ–∞–π–ª–µ server/storage.ts

${codeLines.join(',\n')}

// –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${this.processedProducts.length}
// –î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞: ${new Date().toISOString()}`;

    fs.writeFileSync('scripts/imported-products.js', fullCode);
    console.log('üìÑ –ö–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ scripts/imported-products.js');
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  saveProcessedJson() {
    const output = {
      products: this.processedProducts,
      totalCount: this.processedProducts.length,
      processedAt: new Date().toISOString()
    };
    
    fs.writeFileSync('scripts/processed-products.json', JSON.stringify(output, null, 2));
    console.log('üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scripts/processed-products.json');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const jsonFile = process.argv[2];
if (!jsonFile) {
  console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-from-scraper.js <–ø—É—Ç—å-–∫-json-—Ñ–∞–π–ª—É>');
  console.log('üìù –ü—Ä–∏–º–µ—Ä: node import-from-scraper.js intex-products-1751037623539.json');
  process.exit(1);
}

const importer = new ProductImporter();
importer.importFromJson(jsonFile)
  .then((products) => {
    console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: scripts/imported-products.js`);
    console.log(`\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
    console.log(`1. –û—Ç–∫—Ä–æ–π—Ç–µ scripts/imported-products.js`);
    console.log(`2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`3. –î–æ–±–∞–≤—å—Ç–µ –≤ server/storage.ts –≤ –º–∞—Å—Å–∏–≤ productsData`);
    
    importer.saveProcessedJson();
  })
  .catch((error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
    process.exit(1);
  });