#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Node.js –≤–µ—Ä—Å–∏–∏ –≤ PHP –≤–µ—Ä—Å–∏—é
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SQL
 */

import { db } from '../server/db.js';
import { products, categories } from '../shared/schema.js';
import { eq } from 'drizzle-orm';
import { writeFileSync } from 'fs';

async function exportToSQL() {
    console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Node.js –≤–µ—Ä—Å–∏–∏ –≤ SQL...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const categoriesData = await db.select().from(categories);
        const productsData = await db.select().from(products);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesData.length}`);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsData.length}`);
        
        let sql = '';
        
        // –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        sql += "-- –û—á–∏—Å—Ç–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n";
        sql += "DELETE FROM categories WHERE id > 0;\n";
        sql += "ALTER SEQUENCE categories_id_seq RESTART WITH 1;\n\n";
        
        categoriesData.forEach(category => {
            const values = [
                category.id,
                escapeSQL(category.name),
                escapeSQL(category.slug),
                escapeSQL(category.description || ''),
                category.parentId || 'NULL',
                category.sortOrder || 0,
                escapeSQL(category.imageUrl || '')
            ];
            
            sql += `INSERT INTO categories (id, name, slug, description, parent_id, sort_order, image_url) VALUES `;
            sql += `(${values.join(', ')});\n`;
        });
        
        sql += "\n-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n";
        sql += `SELECT setval('categories_id_seq', ${Math.max(...categoriesData.map(c => c.id))});\n\n`;
        
        // –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
        sql += "-- –û—á–∏—Å—Ç–∫–∞ –∏ –≤—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n";
        sql += "DELETE FROM products WHERE id > 0;\n";
        sql += "ALTER SEQUENCE products_id_seq RESTART WITH 1;\n\n";
        
        productsData.forEach(product => {
            const values = [
                product.id,
                escapeSQL(product.name),
                escapeSQL(product.slug),
                escapeSQL(product.sku),
                escapeSQL(product.description || ''),
                escapeSQL(product.shortDescription || ''),
                product.price,
                product.originalPrice || 'NULL',
                product.categoryId || 'NULL',
                escapeSQL(product.brand || ''),
                escapeSQL(JSON.stringify(product.images || [])),
                escapeSQL(JSON.stringify(product.specifications || {})),
                product.rating || 0,
                product.reviewCount || 0,
                product.isPopular ? 'true' : 'false',
                product.isActive ? 'true' : 'false',
                product.stockQuantity || 0
            ];
            
            sql += `INSERT INTO products (id, name, slug, sku, description, short_description, price, original_price, category_id, brand, images, specifications, rating, review_count, is_popular, is_active, stock_quantity) VALUES `;
            sql += `(${values.join(', ')});\n`;
        });
        
        sql += "\n-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤\n";
        sql += `SELECT setval('products_id_seq', ${Math.max(...productsData.map(p => p.id))});\n\n`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        writeFileSync('php-version/import-data.sql', sql);
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ php-version/import-data.sql');
        console.log('üìù –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç SQL —Ñ–∞–π–ª –≤ –≤–∞—à–µ–π PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        await exportToCSV(categoriesData, productsData);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    }
}

async function exportToCSV(categoriesData, productsData) {
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤...');
    
    // CSV –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    let categoriesCSV = 'id,name,slug,description,parent_id,sort_order,image_url\n';
    categoriesData.forEach(category => {
        categoriesCSV += [
            category.id,
            `"${(category.name || '').replace(/"/g, '""')}"`,
            `"${(category.slug || '').replace(/"/g, '""')}"`,
            `"${(category.description || '').replace(/"/g, '""')}"`,
            category.parentId || '',
            category.sortOrder || 0,
            `"${(category.imageUrl || '').replace(/"/g, '""')}"`
        ].join(',') + '\n';
    });
    writeFileSync('php-version/categories.csv', categoriesCSV);
    
    // CSV –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    let productsCSV = 'id,name,slug,sku,description,short_description,price,original_price,category_id,brand,images,specifications,rating,review_count,is_popular,is_active,stock_quantity\n';
    productsData.forEach(product => {
        productsCSV += [
            product.id,
            `"${(product.name || '').replace(/"/g, '""')}"`,
            `"${(product.slug || '').replace(/"/g, '""')}"`,
            `"${(product.sku || '').replace(/"/g, '""')}"`,
            `"${(product.description || '').replace(/"/g, '""')}"`,
            `"${(product.shortDescription || '').replace(/"/g, '""')}"`,
            product.price,
            product.originalPrice || '',
            product.categoryId || '',
            `"${(product.brand || '').replace(/"/g, '""')}"`,
            `"${JSON.stringify(product.images || []).replace(/"/g, '""')}"`,
            `"${JSON.stringify(product.specifications || {}).replace(/"/g, '""')}"`,
            product.rating || 0,
            product.reviewCount || 0,
            product.isPopular ? 1 : 0,
            product.isActive ? 1 : 0,
            product.stockQuantity || 0
        ].join(',') + '\n';
    });
    writeFileSync('php-version/products.csv', productsCSV);
    
    console.log('‚úÖ CSV —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: categories.csv, products.csv');
}

function escapeSQL(value) {
    if (value === null || value === undefined) {
        return 'NULL';
    }
    if (typeof value === 'string') {
        return `'${value.replace(/'/g, "''")}'`;
    }
    return value;
}

// –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
exportToSQL().then(() => {
    console.log('üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ php-version/ –Ω–∞ –≤–∞—à —Ö–æ—Å—Ç–∏–Ω–≥');
    console.log('2. –°–æ–∑–¥–∞–π—Ç–µ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ database.sql –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
    console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ import-data.sql –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    console.log('5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config.php —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.log('6. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});