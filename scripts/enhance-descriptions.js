import fs from 'fs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
const catalogData = JSON.parse(fs.readFileSync('./full-catalog-processed.json', 'utf-8'));

console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤...`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function enhanceDescription(product) {
  const { name, specifications } = product;
  let specs = {};
  
  try {
    specs = JSON.parse(specifications);
  } catch (e) {
    specs = {};
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
  const nameL = name.toLowerCase();
  let description = '';
  
  if (nameL.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π –±–∞—Å—Å–µ–π–Ω') || nameL.includes('–∫–∞—Ä–∫–∞—Å–Ω–æ–≥–æ –±–∞—Å—Å–µ–π–Ω–∞')) {
    description = generateFramePoolDescription(name, specs);
  } else if (nameL.includes('–Ω–∞–¥—É–≤–Ω–æ–π –±–∞—Å—Å–µ–π–Ω') || nameL.includes('fast set')) {
    description = generateInflatablePoolDescription(name, specs);
  } else if (nameL.includes('–Ω–∞—Å–æ—Å') || nameL.includes('—Ñ–∏–ª—å—Ç—Ä')) {
    description = generatePumpDescription(name, specs);
  } else if (nameL.includes('–ª–µ—Å—Ç–Ω–∏—Ü–∞')) {
    description = generateLadderDescription(name, specs);
  } else if (nameL.includes('—Ç–µ–Ω—Ç') || nameL.includes('–ø–æ–∫—Ä—ã–≤–∞–ª–æ')) {
    description = generateCoverDescription(name, specs);
  } else if (nameL.includes('—á–∞—à–∞')) {
    description = generateChashDescription(name, specs);
  } else {
    description = generateAccessoryDescription(name, specs);
  }

  return description;
}

function generateFramePoolDescription(name, specs) {
  const brand = name.includes('Intex') ? 'Intex' : name.includes('Bestway') ? 'Bestway' : '';
  const isUltra = name.includes('Ultra');
  const isPrism = name.includes('Prism');
  const isSteel = name.includes('Steel Pro');
  
  let desc = `–ö–∞—Ä–∫–∞—Å–Ω—ã–π –±–∞—Å—Å–µ–π–Ω ${brand}`;
  
  if (isUltra) {
    desc += ' —Å–µ—Ä–∏–∏ Ultra Frame - –ø—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫–∞—Ä–∫–∞—Å–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç—å—é.';
  } else if (isPrism) {
    desc += ' —Å–µ—Ä–∏–∏ Prism Frame - –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π Super-Tough –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏.';
  } else if (isSteel) {
    desc += ' —Å–µ—Ä–∏–∏ Steel Pro - –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–º –∫–∞—Ä–∫–∞—Å–æ–º, –ø–æ–∫—Ä—ã—Ç—ã–º –∞–Ω—Ç–∏–∫–æ—Ä—Ä–æ–∑–∏–π–Ω—ã–º —Å–ª–æ–µ–º.';
  } else {
    desc += ' - –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –¥–∞—á–∏ –∏ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞.';
  }

  if (specs['–û–±—ä–µ–º']) {
    desc += ` –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±–∞—Å—Å–µ–π–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${specs['–û–±—ä–µ–º']}.`;
  }
  
  if (specs['–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –º–∏–Ω']) {
    desc += ` –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: –≤—Å–µ–≥–æ ${specs['–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –º–∏–Ω']} –º–∏–Ω—É—Ç.`;
  } else {
    desc += ' –ë—ã—Å—Ç—Ä–∞—è –∏ –ø—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.';
  }

  desc += ' –ß–∞—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ—Ö—Å–ª–æ–π–Ω–æ–≥–æ –ü–í–•-–º–∞—Ç–µ—Ä–∏–∞–ª–∞, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ –ø—Ä–æ–∫–æ–ª–∞–º –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–∞.';
  
  if (specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ª/—á']) {
    desc += ` –í –∫–æ–º–ø–ª–µ–∫—Ç–µ —Ñ–∏–ª—å—Ç—Ä-–Ω–∞—Å–æ—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ${specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ª/—á']} –ª/—á –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —á–∏—Å—Ç–æ—Ç—ã –≤–æ–¥—ã.`;
  }

  desc += ' –ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—É–≥–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ.';

  return desc;
}

function generateInflatablePoolDescription(name, specs) {
  const brand = name.includes('Intex') ? 'Intex' : name.includes('Bestway') ? 'Bestway' : '';
  
  let desc = `–ù–∞–¥—É–≤–Ω–æ–π –±–∞—Å—Å–µ–π–Ω ${brand} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞ —É –¥–æ–º–∞.`;
  
  desc += ' –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Easy Set –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞—Å—Å–µ–π–Ω –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç: –Ω–∞–¥—É–π—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ –∫–æ–ª—å—Ü–æ –∏ –Ω–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–æ–¥–æ–π.';
  
  if (specs['–û–±—ä–µ–º']) {
    desc += ` –û–±—ä–µ–º –±–∞—Å—Å–µ–π–Ω–∞: ${specs['–û–±—ä–µ–º']}.`;
  }
  
  desc += ' –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –ø—Ä–æ—á–Ω–æ–≥–æ –≤–∏–Ω–∏–ª–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π.';
  
  if (name.includes('—Ñ–∏–ª—å—Ç—Ä') || specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ª/—á']) {
    desc += ' –í –∫–æ–º–ø–ª–µ–∫—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä-–Ω–∞—Å–æ—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–æ–¥—ã.';
  }
  
  desc += ' –ö–æ–º–ø–∞–∫—Ç–µ–Ω –≤ —Å–ª–æ–∂–µ–Ω–Ω–æ–º –≤–∏–¥–µ, –ª–µ–≥–∫–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è.';

  return desc;
}

function generatePumpDescription(name, specs) {
  let desc = '';
  
  if (name.includes('—Å–∫–∏–º–º–µ—Ä')) {
    desc = '–°–∫–∏–º–º–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤–æ–¥—ã –±–∞—Å—Å–µ–π–Ω–∞. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–¥–∞–ª—è–µ—Ç –ª–∏—Å—Ç—å—è, –Ω–∞—Å–µ–∫–æ–º—ã—Ö –∏ –º–µ–ª–∫–∏–π –º—É—Å–æ—Ä —Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤–æ–¥—ã.';
  } else if (name.includes('—Ñ–∏–ª—å—Ç—Ä-–Ω–∞—Å–æ—Å')) {
    desc = '–§–∏–ª—å—Ç—Ä-–Ω–∞—Å–æ—Å –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–∏—Ä–∫—É–ª—è—Ü–∏—é –∏ –æ—á–∏—Å—Ç–∫—É –≤–æ–¥—ã.';
    if (specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] || specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ª/—á']) {
      const performance = specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'] || specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞ –ª/—á'];
      desc += ` –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performance}.`;
    }
    desc += ' –ö–∞—Ä—Ç—Ä–∏–¥–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ–¥—É –≤ —á–∏—Å—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.';
  } else {
    desc = '–ù–∞—Å–æ—Å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –≤–æ–¥–æ–æ–±–º–µ–Ω–∞.';
  }
  
  desc += ' –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –º–æ–¥–µ–ª–µ–π –±–∞—Å—Å–µ–π–Ω–æ–≤.';

  return desc;
}

function generateLadderDescription(name, specs) {
  let desc = '–õ–µ—Å—Ç–Ω–∏—Ü–∞ –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥ –∏–∑ –≤–æ–¥—ã.';
  
  if (name.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')) {
    desc += ' –ú–æ–¥–µ–ª—å —Å —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Å—Ç—É–ø–µ–Ω—å–∫–∏ –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥–µ—Ç–µ–π –∫ –±–∞—Å—Å–µ–π–Ω—É.';
  }
  
  desc += ' –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∫ –∫–æ—Ä—Ä–æ–∑–∏–∏ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é —Ö–ª–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–æ–¥—ã.';
  desc += ' –ù–µ—Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç—É–ø–µ–Ω–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.';
  
  if (specs['–í—ã—Å–æ—Ç–∞'] || name.includes('122') || name.includes('132')) {
    desc += ' –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤—ã—Å–æ—Ç—ã.';
  }

  return desc;
}

function generateCoverDescription(name, specs) {
  let desc = '';
  
  if (name.includes('—Ç–µ–Ω—Ç')) {
    desc = '–ó–∞—â–∏—Ç–Ω—ã–π —Ç–µ–Ω—Ç –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–¥—É –æ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π, –ª–∏—Å—Ç—å–µ–≤ –∏ –º—É—Å–æ—Ä–∞.';
    desc += ' –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∏—Å–ø–∞—Ä–µ–Ω–∏–µ.';
    desc += ' –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –ø—Ä–æ—á–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º—É –∏–∑–ª—É—á–µ–Ω–∏—é.';
  } else if (name.includes('–ø–æ–¥—Å—Ç–∏–ª–∫–∞')) {
    desc = '–ó–∞—â–∏—Ç–Ω–∞—è –ø–æ–¥—Å—Ç–∏–ª–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥ –¥–Ω–æ –±–∞—Å—Å–µ–π–Ω–∞.';
    desc += ' –ó–∞—â–∏—â–∞–µ—Ç –¥–Ω–æ –æ—Ç –ø—Ä–æ–∫–æ–ª–æ–≤ –æ—Å—Ç—Ä—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—é.';
    desc += ' –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ—á–Ω–æ–≥–æ –Ω–µ—Ç–∫–∞–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.';
  }
  
  desc += ' –õ–µ–≥–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ —Å–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.';

  return desc;
}

function generateChashDescription(name, specs) {
  let desc = '–ó–∞–ø–∞—Å–Ω–∞—è —á–∞—à–∞ –¥–ª—è –∫–∞—Ä–∫–∞—Å–Ω–æ–≥–æ –±–∞—Å—Å–µ–π–Ω–∞ - –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π —á–∞—à–∏.';
  desc += ' –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ü–í–•-–º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç—å—é.';
  desc += ' –£—Å—Ç–æ–π—á–∏–≤–∞ –∫ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é —Ö–ª–æ—Ä–∞, —Å–æ–ª–∏ –∏ —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è.';
  
  if (specs['–î–∏–∞–º–µ—Ç—Ä']) {
    desc += ` –î–∏–∞–º–µ—Ç—Ä: ${specs['–î–∏–∞–º–µ—Ç—Ä']}.`;
  }
  
  if (specs['–í—ã—Å–æ—Ç–∞']) {
    desc += ` –í—ã—Å–æ—Ç–∞: ${specs['–í—ã—Å–æ—Ç–∞']}.`;
  }
  
  desc += ' –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–∞–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—É—é –ø–æ—Å–∞–¥–∫—É.';

  return desc;
}

function generateAccessoryDescription(name, specs) {
  let desc = '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –æ—Ç –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.';
  
  if (name.includes('–∫–æ–º–ø–ª–µ–∫—Ç')) {
    desc = '–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.';
  } else if (name.includes('–∫–∞—Ä—Ç—Ä–∏–¥–∂')) {
    desc = '–°–º–µ–Ω–Ω—ã–π –∫–∞—Ä—Ç—Ä–∏–¥–∂ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä-–Ω–∞—Å–æ—Å–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –≤–æ–¥—ã –≤ –±–∞—Å—Å–µ–π–Ω–µ.';
    desc += ' –†–µ–≥—É–ª—è—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.';
  }
  
  desc += ' –°–æ–≤–º–µ—Å—Ç–∏–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –±–∞—Å—Å–µ–π–Ω–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.';
  desc += ' –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ —Å–ª—É–∂–±—ã.';

  return desc;
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
let enhancedCount = 0;
catalogData.products.forEach(product => {
  const currentDesc = product.description;
  
  // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
  if (!currentDesc || 
      currentDesc.length < 100 || 
      currentDesc.includes('–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è')) {
    
    product.description = enhanceDescription(product);
    enhancedCount++;
  }
});

console.log(`‚úÖ –£–ª—É—á—à–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π: ${enhancedCount} –∏–∑ ${catalogData.products.length}`);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
fs.writeFileSync('./full-catalog-enhanced.json', JSON.stringify(catalogData, null, 2), 'utf-8');
console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏: full-catalog-enhanced.json');

// –û–±–Ω–æ–≤–ª—è–µ–º storage.ts
const storageTemplate = `import { 
  Product, InsertProduct, 
  Category, InsertCategory, 
  Order, InsertOrder, 
  Consultation, InsertConsultation 
} from "@shared/schema";

export interface IStorage {
  // Products
  getProducts(filters?: { category?: string; minPrice?: number; maxPrice?: number; inStock?: boolean; search?: string }): Promise<Product[]>;
  getProduct(id: number): Promise<Product | undefined>;
  getPopularProducts(): Promise<Product[]>;
  createProduct(product: InsertProduct): Promise<Product>;
  
  // Categories
  getCategories(): Promise<Category[]>;
  getCategory(slug: string): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  
  // Orders
  createOrder(order: InsertOrder): Promise<Order>;
  getOrder(id: number): Promise<Order | undefined>;
  
  // Consultations
  createConsultation(consultation: InsertConsultation): Promise<Consultation>;
}

export class MemStorage implements IStorage {
  private products: Map<number, Product>;
  private categories: Map<number, Category>;
  private orders: Map<number, Order>;
  private consultations: Map<number, Consultation>;
  private currentProductId: number;
  private currentCategoryId: number;
  private currentOrderId: number;
  private currentConsultationId: number;

  constructor() {
    this.products = new Map();
    this.categories = new Map();
    this.orders = new Map();
    this.consultations = new Map();
    this.currentProductId = 1;
    this.currentCategoryId = 1;
    this.currentOrderId = 1;
    this.currentConsultationId = 1;
    
    this.initializeData();
  }

  private initializeData() {
    // Initialize categories - –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
    const categoriesData = [
      { name: "–ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "frame-pools", description: "–ü—Ä–æ—á–Ω—ã–µ –∫–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã –¥–ª—è –¥–∞—á–∏", imageUrl: null, productCount: null },
      { name: "–ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "inflatable-pools", description: "–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–µ –Ω–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", imageUrl: null, productCount: null },
      { name: "–ù–∞—Å–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã", slug: "pumps-filters", description: "–°–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ –≤–æ–¥—ã", imageUrl: null, productCount: null },
      { name: "–õ–µ—Å—Ç–Ω–∏—Ü—ã", slug: "ladders", description: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", imageUrl: null, productCount: null },
      { name: "–¢–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∏–ª–∫–∏", slug: "covers-underlays", description: "–ó–∞—â–∏—Ç–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", imageUrl: null, productCount: null },
      { name: "–•–∏–º–∏—è –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", slug: "chemicals", description: "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤–æ–¥—ã", imageUrl: null, productCount: null },
      { name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", slug: "accessories", description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏", imageUrl: null, productCount: null }
    ];

    categoriesData.forEach(cat => {
      const category: Category = { 
        id: this.currentCategoryId++, 
        ...cat
      };
      this.categories.set(category.id, category);
    });

    // Initialize products - –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ (${catalogData.products.length} —Ç–æ–≤–∞—Ä–æ–≤)
    const productsData = ${JSON.stringify(catalogData.products, null, 2)};

    productsData.forEach(prod => {
      const product: Product = { 
        id: this.currentProductId++, 
        ...prod,
        originalPrice: prod.originalPrice || null,
        brand: prod.brand || null,
        subcategory: prod.subcategory || null,
        volume: prod.volume || null,
        images: prod.images || null,
        inStock: prod.inStock !== undefined ? prod.inStock : true,
        isPopular: prod.isPopular || false,
        isNew: prod.isNew || false,
        discount: prod.discount || 0,
        rating: prod.rating || "4.0",
        reviewCount: prod.reviewCount || 0
      };
      this.products.set(product.id, product);
    });
  }

  async getProducts(filters?: { category?: string; minPrice?: number; maxPrice?: number; inStock?: boolean; search?: string }): Promise<Product[]> {
    let results = Array.from(this.products.values());
    
    if (filters) {
      if (filters.category) {
        results = results.filter(p => p.category === filters.category);
      }
      if (filters.minPrice !== undefined) {
        results = results.filter(p => parseInt(p.price) >= filters.minPrice!);
      }
      if (filters.maxPrice !== undefined) {
        results = results.filter(p => parseInt(p.price) <= filters.maxPrice!);
      }
      if (filters.inStock !== undefined) {
        results = results.filter(p => p.inStock === filters.inStock);
      }
      if (filters.search) {
        const searchLower = filters.search.toLowerCase();
        results = results.filter(p => 
          p.name.toLowerCase().includes(searchLower) ||
          p.description.toLowerCase().includes(searchLower) ||
          (p.brand && p.brand.toLowerCase().includes(searchLower))
        );
      }
    }
    
    return results.sort((a, b) => {
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞
      if (a.isPopular && !b.isPopular) return -1;
      if (!a.isPopular && b.isPopular) return 1;
      
      // –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —Å–Ω–∞—á–∞–ª–∞ —Å—Ä–µ–¥–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
      if (a.isNew && !b.isNew) return -1;
      if (!a.isNew && b.isNew) return 1;
      
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ ID
      return a.id - b.id;
    });
  }

  async getProduct(id: number): Promise<Product | undefined> {
    return this.products.get(id);
  }

  async getPopularProducts(): Promise<Product[]> {
    return Array.from(this.products.values())
      .filter(p => p.isPopular)
      .sort((a, b) => parseFloat(b.rating || "0") - parseFloat(a.rating || "0"))
      .slice(0, 8);
  }

  async createProduct(insertProduct: InsertProduct): Promise<Product> {
    const product: Product = { 
      id: this.currentProductId++, 
      ...insertProduct,
      originalPrice: insertProduct.originalPrice || null,
      brand: insertProduct.brand || null,
      subcategory: insertProduct.subcategory || null,
      volume: insertProduct.volume || null,
      images: insertProduct.images || null,
      inStock: insertProduct.inStock !== undefined ? insertProduct.inStock : true,
      isPopular: insertProduct.isPopular || false,
      isNew: insertProduct.isNew || false,
      discount: insertProduct.discount || 0,
      rating: insertProduct.rating || "4.0",
      reviewCount: insertProduct.reviewCount || 0
    };
    this.products.set(product.id, product);
    return product;
  }

  async getCategories(): Promise<Category[]> {
    return Array.from(this.categories.values());
  }

  async getCategory(slug: string): Promise<Category | undefined> {
    return Array.from(this.categories.values()).find(c => c.slug === slug);
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    const category: Category = { 
      id: this.currentCategoryId++, 
      ...insertCategory,
      description: insertCategory.description || null,
      imageUrl: insertCategory.imageUrl || null,
      productCount: insertCategory.productCount || null
    };
    this.categories.set(category.id, category);
    return category;
  }

  async createOrder(insertOrder: InsertOrder): Promise<Order> {
    const order: Order = { 
      id: this.currentOrderId++, 
      ...insertOrder,
      status: insertOrder.status || "–Ω–æ–≤—ã–π",
      customerEmail: insertOrder.customerEmail || null,
      deliveryAddress: insertOrder.deliveryAddress || null,
      notes: insertOrder.notes || null,
      createdAt: new Date()
    };
    this.orders.set(order.id, order);
    return order;
  }

  async getOrder(id: number): Promise<Order | undefined> {
    return this.orders.get(id);
  }

  async createConsultation(insertConsultation: InsertConsultation): Promise<Consultation> {
    const consultation: Consultation = { 
      id: this.currentConsultationId++, 
      ...insertConsultation,
      message: insertConsultation.message || null,
      status: "–Ω–æ–≤–∞—è",
      email: insertConsultation.email || null,
      createdAt: new Date()
    };
    this.consultations.set(consultation.id, consultation);
    return consultation;
  }
}

export const storage = new MemStorage();`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π storage.ts
fs.writeFileSync('../server/storage.ts', storageTemplate, 'utf-8');
console.log('‚úÖ Storage.ts –æ–±–Ω–æ–≤–ª–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤!');

main();