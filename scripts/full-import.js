import fs from 'fs';
import path from 'path';

class FullCatalogImporter {
  constructor() {
    this.products = [];
    this.categories = new Set();
    this.brands = new Set();
  }

  async importFromCSV(csvFilePath) {
    console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞—é CSV —Ñ–∞–π–ª...');
    const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
    const lines = csvContent.split('\n');
    const headers = this.parseCSVLine(lines[0]);
    
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:', headers.slice(0, 10));
    
    let processedCount = 0;
    let skippedCount = 0;

    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;

      try {
        const fields = this.parseCSVLine(line);
        if (fields.length < headers.length - 5) continue; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

        const product = this.convertToOurFormat(fields, headers);
        if (product) {
          this.products.push(product);
          processedCount++;
          
          if (processedCount % 100 === 0) {
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
          }
        } else {
          skippedCount++;
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i}: ${error.message}`);
        skippedCount++;
      }
    }

    console.log(`üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${processedCount} —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${this.categories.size}`);
    console.log(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: ${this.brands.size}`);

    return {
      products: this.products,
      categories: Array.from(this.categories),
      brands: Array.from(this.brands)
    };
  }

  parseCSVLine(line) {
    const fields = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      const nextChar = line[i + 1];
      
      if (char === '"') {
        if (inQuotes && nextChar === '"') {
          current += '"';
          i++; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞–≤—ã—á–∫—É
        } else {
          inQuotes = !inQuotes;
        }
      } else if (char === ';' && !inQuotes) {
        fields.push(current.trim());
        current = '';
      } else {
        current += char;
      }
    }
    
    fields.push(current.trim());
    return fields;
  }

  convertToOurFormat(fields, headers) {
    const getField = (name) => {
      const index = headers.indexOf(name);
      return index >= 0 ? fields[index] : '';
    };

    const title = getField('–ó–∞–≥–æ–ª–æ–≤–æ–∫');
    const price = getField('–¶–µ–Ω–∞');
    const category1 = getField('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1');
    const category2 = getField('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2');
    const category3 = getField('–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3');
    const description = getField('–û–ø–∏—Å–∞–Ω–∏–µ');
    const availability = getField('–ù–∞–ª–∏—á–∏–µ');
    const weight = getField('–í–µ—Å');
    const dimensions = getField('–ì–∞–±–∞—Ä–∏—Ç—ã');
    const manufacturer = getField('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å');
    const article = getField('–ê—Ä—Ç–∏–∫—É–ª');

    if (!title || !price || !category1) {
      return null;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = [];
    for (let i = 1; i <= 17; i++) {
      const imageField = getField(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i}`);
      if (imageField && imageField.startsWith('https://')) {
        images.push(imageField);
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥
    const brand = this.determineBrand(title, manufacturer);
    this.brands.add(brand);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const category = this.determineCategory(category1, category2, category3, title);
    this.categories.add(category);

    // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML
    const cleanDescription = this.cleanDescription(description);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specifications = this.extractSpecifications(description, title);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º
    const volume = this.extractVolume(title);

    return {
      name: title,
      description: cleanDescription,
      price: price.toString(),
      originalPrice: null,
      category: category,
      subcategory: this.getSubcategory(category2, category3),
      brand: brand,
      volume: volume,
      imageUrl: images[0] || "https://images.unsplash.com/photo-1544551763-46a013bb70d5",
      images: images.length > 0 ? images : ["https://images.unsplash.com/photo-1544551763-46a013bb70d5"],
      specifications: JSON.stringify(specifications),
      inStock: availability === '–í –Ω–∞–ª–∏—á–∏–∏',
      isPopular: this.isPopularProduct(title, brand),
      isNew: false,
      discount: 0,
      rating: this.generateRating(),
      reviewCount: this.generateReviewCount()
    };
  }

  determineBrand(title, manufacturer) {
    const titleLower = title.toLowerCase();
    
    if (titleLower.includes('intex') || manufacturer === 'Intex') return 'Intex';
    if (titleLower.includes('bestway') || manufacturer === 'Bestway') return 'Bestway';
    if (titleLower.includes('gre') || manufacturer === 'GRE') return 'GRE';
    if (titleLower.includes('azuro') || manufacturer === 'Azuro') return 'Azuro';
    if (titleLower.includes('mountfield') || manufacturer === 'Mountfield') return 'Mountfield';
    
    return manufacturer || '–î—Ä—É–≥–∏–µ';
  }

  determineCategory(cat1, cat2, cat3, title) {
    const titleLower = title.toLowerCase();
    
    // –ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    if (cat2 === '–ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã' || titleLower.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π')) {
      return 'frame-pools';
    }
    
    // –ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    if (cat2 === '–ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã' || titleLower.includes('–Ω–∞–¥—É–≤–Ω–æ–π')) {
      return 'inflatable-pools';
    }
    
    // –ù–∞—Å–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    if (titleLower.includes('–Ω–∞—Å–æ—Å') || titleLower.includes('—Ñ–∏–ª—å—Ç—Ä') || titleLower.includes('—Å–∫–∏–º–º–µ—Ä')) {
      return 'pumps-filters';
    }
    
    // –õ–µ—Å—Ç–Ω–∏—Ü—ã
    if (titleLower.includes('–ª–µ—Å—Ç–Ω–∏—Ü–∞') || titleLower.includes('—Å—Ç—É–ø–µ–Ω—å–∫–∏')) {
      return 'ladders';
    }
    
    // –¢–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∏–ª–∫–∏
    if (titleLower.includes('—Ç–µ–Ω—Ç') || titleLower.includes('–ø–æ–¥—Å—Ç–∏–ª–∫–∞') || titleLower.includes('–ø–æ–∫—Ä—ã–≤–∞–ª–æ')) {
      return 'covers-underlays';
    }
    
    // –•–∏–º–∏—è
    if (titleLower.includes('—Ö–∏–º–∏—è') || titleLower.includes('—Ö–ª–æ—Ä') || titleLower.includes('ph')) {
      return 'chemicals';
    }
    
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    return 'accessories';
  }

  getSubcategory(cat2, cat3) {
    if (cat3) return this.slugify(cat3);
    if (cat2) return this.slugify(cat2);
    return null;
  }

  slugify(text) {
    return text.toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^\w\-]+/g, '')
      .replace(/\-\-+/g, '-')
      .replace(/^-+/, '')
      .replace(/-+$/, '');
  }

  cleanDescription(description) {
    if (!description) return '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –±–∞—Å—Å–µ–π–Ω–∞ –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.';
    
    return description
      .replace(/<[^>]*>/g, '') // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
      .replace(/&[^;]+;/g, ' ') // –£–¥–∞–ª—è–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏
      .replace(/\s+/g, ' ') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .trim()
      .substring(0, 500) + (description.length > 500 ? '...' : '');
  }

  extractSpecifications(description, title) {
    const specs = {};
    
    if (!description) return specs;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤
    const listItems = description.match(/<li[^>]*>(.*?)<\/li>/g) || [];
    listItems.forEach(item => {
      const clean = item.replace(/<[^>]*>/g, '').trim();
      const parts = clean.split(':');
      if (parts.length === 2) {
        specs[parts[0].trim()] = parts[1].trim();
      }
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const sizeMatch = title.match(/(\d+)x(\d+)(?:x(\d+))?/);
    if (sizeMatch) {
      if (sizeMatch[3]) {
        specs['–†–∞–∑–º–µ—Ä'] = `${sizeMatch[1]}x${sizeMatch[2]}x${sizeMatch[3]} —Å–º`;
      } else {
        specs['–î–∏–∞–º–µ—Ç—Ä'] = `${sizeMatch[1]} —Å–º`;
        specs['–í—ã—Å–æ—Ç–∞'] = `${sizeMatch[2]} —Å–º`;
      }
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º
    const volumeMatch = title.match(/(\d+)–ª/);
    if (volumeMatch) {
      specs['–û–±—ä–µ–º'] = `${volumeMatch[1]} –ª`;
    }
    
    return specs;
  }

  extractVolume(title) {
    const volumeMatch = title.match(/(\d+)–ª/);
    return volumeMatch ? `${volumeMatch[1]}–ª` : null;
  }

  isPopularProduct(title, brand) {
    const titleLower = title.toLowerCase();
    return (
      titleLower.includes('prism frame') ||
      titleLower.includes('ultra frame') ||
      titleLower.includes('steel pro') ||
      brand === 'Intex' ||
      brand === 'Bestway'
    );
  }

  generateRating() {
    return (4.0 + Math.random() * 1.0).toFixed(1);
  }

  generateReviewCount() {
    return Math.floor(Math.random() * 50) + 5;
  }

  saveResults() {
    const results = {
      products: this.products,
      categories: Array.from(this.categories),
      brands: Array.from(this.brands),
      stats: {
        totalProducts: this.products.length,
        totalCategories: this.categories.size,
        totalBrands: this.brands.size
      }
    };

    fs.writeFileSync('./full-catalog-processed.json', JSON.stringify(results, null, 2), 'utf-8');
    console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scripts/full-catalog-processed.json');

    return results;
  }

  generateStorageCode() {
    console.log('üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –¥–ª—è storage.ts...');
    
    const categories = [
      { name: "–ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "frame-pools", description: "–ü—Ä–æ—á–Ω—ã–µ –∫–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã –¥–ª—è –¥–∞—á–∏" },
      { name: "–ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã", slug: "inflatable-pools", description: "–ë—ã—Å—Ç—Ä–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–µ –Ω–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã" },
      { name: "–ù–∞—Å–æ—Å—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã", slug: "pumps-filters", description: "–°–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏ –∏ —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏ –≤–æ–¥—ã" },
      { name: "–õ–µ—Å—Ç–Ω–∏—Ü—ã", slug: "ladders", description: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–µ—Å—Ç–Ω–∏—Ü—ã –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤" },
      { name: "–¢–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∏–ª–∫–∏", slug: "covers-underlays", description: "–ó–∞—â–∏—Ç–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ –æ—Å–Ω–æ–≤–∞–Ω–∏—è" },
      { name: "–•–∏–º–∏—è –¥–ª—è –±–∞—Å—Å–µ–π–Ω–æ–≤", slug: "chemicals", description: "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏–∏ –≤–æ–¥—ã" },
      { name: "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", slug: "accessories", description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏" }
    ];

    let code = `// –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ (${this.products.length} –ø–æ–∑–∏—Ü–∏–π)\n`;
    code += `const categoriesData = ${JSON.stringify(categories, null, 2)};\n\n`;
    code += `const productsData = ${JSON.stringify(this.products.slice(0, 50), null, 2)};\n\n`; // –ü–µ—Ä–≤—ã–µ 50 –¥–ª—è –Ω–∞—á–∞–ª–∞
    code += `// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏\n`;

    fs.writeFileSync('scripts/storage-generated.js', code, 'utf-8');
    console.log('üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ scripts/storage-generated.js');
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
  const importer = new FullCatalogImporter();
  
  try {
    const csvPath = '../attached_assets/basseyn.ru_–ö–∞—Ä–∫–∞—Å–Ω—ã–µ_–±–∞—Å—Å–µ–π–Ω—ã_Intex_–ö–∞—Ä–∫–∞_27-06-25_1751043359220.csv';
    const results = await importer.importFromCSV(csvPath);
    
    importer.saveResults();
    importer.generateStorageCode();
    
    console.log('üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${results.products.length}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${results.categories.length}`);
    console.log(`üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤: ${results.brands.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  }
}

main();