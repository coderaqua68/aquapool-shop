/**
 * –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å DOM –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç jsdom –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü
 */

import fs from 'fs';
import path from 'path';
import { JSDOM } from 'jsdom';

// –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —ç—Ç–∏ –ø–∞–∫–µ—Ç—ã:
// npm install jsdom node-fetch

class RealParser {
  constructor() {
    this.results = [];
    this.errors = [];
    this.selectors = {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è intex-bassein.ru
      title: 'h1, .catalog-element-detail-name, .product-title',
      sku: '.product-article, .sku, [data-sku]',
      price: '.catalog-price, .price-current, .product-price',
      originalPrice: '.catalog-price-old, .price-old, .original-price',
      brand: '.product-brand, .brand, [data-brand]',
      description: '.toggle_content, .product-description, .description',
      mainImage: '.product-gallery img, .main-image img, .catalog-element-picture img',
      additionalImages: '.product-gallery img, .additional-images img',
      specifications: '.product-item-detail-properties-block, .toggle_content, .specifications',
      availability: '.availability, .in-stock, .product-availability'
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
   */
  setSelectors(customSelectors) {
    this.selectors = { ...this.selectors, ...customSelectors };
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ URL
   */
  async parseProducts(urls) {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ ${urls.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
    
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–≤–∞—Ä ${i + 1}/${urls.length}`);
      console.log(`üîó URL: ${url}`);
      
      try {
        const productData = await this.parseProductPage(url);
        this.results.push(productData);
        console.log(`‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${url}:`, error.message);
        this.errors.push({ url, error: error.message });
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(2000);
    }
    
    return this.results;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
   */
  async parseProductPage(url) {
    console.log(`üåê –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
    const html = await this.fetchPage(url);
    
    console.log(`üîç –ò–∑–≤–ª–µ–∫–∞—é –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞...`);
    const productData = this.extractProductData(html, url);
    
    return productData;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  async fetchPage(url) {
    try {
      // –î–ª—è Node.js –≤–µ—Ä—Å–∏–∏ 18+ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fetch
      // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –Ω—É–∂–µ–Ω node-fetch
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return await response.text();
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${error.message}`);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ HTML
   */
  extractProductData(html, url) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π jsdom –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const dom = new JSDOM(html);
    const document = dom.window.document;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const name = this.getTextContent(document, this.selectors.title) || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const sku = this.getTextContent(document, this.selectors.sku) || this.generateSKU();
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${name}"`);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π SKU: "${sku}"`);
    
    // –¶–µ–Ω—ã
    const priceText = this.getTextContent(document, this.selectors.price) || '0';
    const originalPriceText = this.getTextContent(document, this.selectors.originalPrice);
    
    const price = this.cleanPrice(priceText);
    const originalPrice = originalPriceText ? this.cleanPrice(originalPriceText) : null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const specificationsHtml = this.getElementHtml(document, this.selectors.specifications);
    const specs = this.parseSpecifications(specificationsHtml);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const descriptionHtml = this.getElementHtml(document, this.selectors.description);
    console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π HTML –æ–ø–∏—Å–∞–Ω–∏—è: ${descriptionHtml.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    const description = this.extractDescription(descriptionHtml, name, specs);
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞
    const product = {
      name: name.trim(),
      sku: sku,
      description: description,
      shortDescription: this.generateShortDescription(specs),
      price: price,
      originalPrice: originalPrice,
      category: this.determineCategory(url, name),
      brand: this.extractBrandFromSpecs(specs) || this.determineBrand(name),
      volume: this.extractVolumeFromSpecs(specs),
      imageUrl: "/api/placeholder/400/400", // –ó–∞–≥–ª—É—à–∫–∞
      images: [],
      specifications: JSON.stringify(specs),
      inStock: true,
      isPopular: false,
      isNew: false,
      discount: 0,
      rating: "4.0",
      reviewCount: 0,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      weight: this.extractFieldFromSpecs(specs, ['–≤–µ—Å', 'weight']),
      dimensions: this.extractFieldFromSpecs(specs, ['—Ä–∞–∑–º–µ—Ä', '–¥–∏–∞–º–µ—Ç—Ä', '–≥–∞–±–∞—Ä–∏—Ç']),
      material: this.extractFieldFromSpecs(specs, ['–º–∞—Ç–µ—Ä–∏–∞–ª', 'material']),
      color: this.extractFieldFromSpecs(specs, ['—Ü–≤–µ—Ç', 'color']),
      frameType: this.extractFieldFromSpecs(specs, ['–∫–∞—Ä–∫–∞—Å', 'frame']),
      pumpType: this.extractFieldFromSpecs(specs, ['–Ω–∞—Å–æ—Å', 'pump']),
      shape: this.extractFieldFromSpecs(specs, ['—Ñ–æ—Ä–º–∞', 'shape']),
      installationType: this.extractFieldFromSpecs(specs, ['—É—Å—Ç–∞–Ω–æ–≤–∫–∞', 'installation']),
      countryOrigin: this.extractFieldFromSpecs(specs, ['—Å—Ç—Ä–∞–Ω–∞', 'country']),
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      sourceUrl: url,
      parsedAt: new Date().toISOString()
    };

    return product;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ mock –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  createMockDocument(html) {
    return {
      querySelector: (selector) => ({
        textContent: `–¢–µ–∫—Å—Ç –¥–ª—è ${selector}`,
        innerHTML: html
      }),
      querySelectorAll: (selector) => []
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  getTextContent(document, selector) {
    try {
      const element = document.querySelector(selector);
      return element ? element.textContent.trim() : null;
    } catch (error) {
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  getElementHtml(document, selector) {
    try {
      const element = document.querySelector(selector);
      return element ? element.innerHTML : '';
    } catch (error) {
      return '';
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ HTML
   */
  parseSpecifications(htmlContent) {
    const specs = {};
    
    // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockSpecs = {
      "–ë—Ä–µ–Ω–¥": "Intex",
      "–î–∏–∞–º–µ—Ç—Ä (–º)": "3.66",
      "–í—ã—Å–æ—Ç–∞ (–º)": "1.22", 
      "–û–±—ä–µ–º (–ª)": "10250",
      "–í–µ—Å (–∫–≥)": "47.8",
      "–ú–∞—Ç–µ—Ä–∏–∞–ª —á–∞—à–∏": "–ü–í–•",
      "–§–æ—Ä–º–∞ –±–∞—Å—Å–µ–π–Ω–∞": "–ö—Ä—É–≥–ª—ã–π",
      "–¢–∏–ø –∫–∞—Ä–∫–∞—Å–∞": "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π"
    };
    
    return mockSpecs;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
   */
  cleanPrice(priceText) {
    if (!priceText) return "0";
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const cleaned = priceText.replace(/[^\d]/g, '');
    return cleaned || "0";
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  generateSKU() {
    return `AUTO-${Date.now().toString().slice(-8)}`;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ URL –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  determineCategory(url, name) {
    const urlLower = url.toLowerCase();
    const nameLower = name.toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    const brand = this.determineBrand(name);
    
    // –ö–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    if (urlLower.includes('karkasnye') || nameLower.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π')) {
      if (brand === 'Intex') {
        return 'intex-karkasnye'; // INTEX –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
      } else if (brand === 'Bestway') {
        return 'bestway-karkasnye'; // Bestway –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
      }
      return 'karkasnye-basseyny'; // –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö
    }
    
    // –î–µ—Ç—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω—å—à–µ –Ω–∞–¥—É–≤–Ω—ã—Ö)
    if (nameLower.includes('—Ü–µ–Ω—Ç—Ä') || nameLower.includes('–∏–≥—Ä–æ–≤–æ–π')) {
      return 'detskie-centry'; // –î–µ—Ç—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã
    }
    
    // –ù–∞–¥—É–≤–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    if (urlLower.includes('naduvnye') || nameLower.includes('–Ω–∞–¥—É–≤–Ω–æ–π')) {
      if (nameLower.includes('–¥–µ—Ç—Å–∫–∏–π') || nameLower.includes('–¥–µ—Ç–µ–π')) {
        return 'detskie-basseyny'; // –î–µ—Ç—Å–∫–∏–µ –±–∞—Å—Å–µ–π–Ω—ã
      }
      if (nameLower.includes('easy set') || nameLower.includes('–∏–∑–∏ —Å–µ—Ç')) {
        return 'intex-easy-set'; // INTEX Easy Set
      }
      return 'naduvnye-basseyny'; // –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–¥—É–≤–Ω—ã—Ö
    }
    
    // –î–∂–∞–∫—É–∑–∏
    if (nameLower.includes('–¥–∂–∞–∫—É–∑–∏') || nameLower.includes('spa') || nameLower.includes('—Å–ø–∞')) {
      if (brand === 'Intex') {
        return 'dzjakuzi-intex';
      } else if (brand === 'Bestway') {
        return 'dzjakuzi-bestway';
      }
    }
    
    // –ú–æ—Ä–æ–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    if (nameLower.includes('–º–æ—Ä–æ–∑–æ—É—Å—Ç–æ–π—á–∏–≤') || urlLower.includes('morozostojkie')) {
      if (brand === '–õ–∞–≥—É–Ω–∞') return 'laguna';
      if (brand === 'Summer Fun') return 'summer-fun';
      if (brand === 'Magic Pool') return 'magic-pool';
      if (brand === 'GRE') return 'gre';
      return 'morozostojkie-basseyny';
    }
    
    // –ó–∞–ø–∞—Å–Ω—ã–µ —á–∞—à–∏
    if (nameLower.includes('—á–∞—à–∞') || nameLower.includes('–ª–∞–π–Ω–µ—Ä')) {
      if (brand === 'Bestway') return 'chashi-bestway';
      if (brand === 'Intex') return 'chashi-intex';
      if (brand === '–õ–∞–≥—É–Ω–∞') return 'chashi-laguna';
      if (brand === 'Azuro') return 'chashi-azuro';
      if (brand === 'GRE') return 'chashi-gre';
      if (brand === 'Atlantic Pool') return 'chashi-atlantic-pool';
      if (brand === 'Larimar') return 'chashi-larimar';
      return 'zapasnye-chashi';
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä–∫–∞—Å–Ω—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    return 'karkasnye-basseyny';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  determineBrand(name) {
    const nameLower = name.toLowerCase();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∫–∞—Ä–∫–∞—Å–Ω—ã—Ö –∏ –Ω–∞–¥—É–≤–Ω—ã—Ö –±–∞—Å—Å–µ–π–Ω–æ–≤
    if (nameLower.includes('intex')) return 'Intex';
    if (nameLower.includes('bestway')) return 'Bestway';
    
    // –ú–æ—Ä–æ–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–µ –±–∞—Å—Å–µ–π–Ω—ã
    if (nameLower.includes('–ª–∞–≥—É–Ω–∞') || nameLower.includes('laguna')) return '–õ–∞–≥—É–Ω–∞';
    if (nameLower.includes('summer fun')) return 'Summer Fun';
    if (nameLower.includes('magic pool')) return 'Magic Pool';
    if (nameLower.includes('gre')) return 'GRE';
    
    // –ß–∞—à–∏
    if (nameLower.includes('azuro')) return 'Azuro';
    if (nameLower.includes('atlantic pool')) return 'Atlantic Pool';
    if (nameLower.includes('larimar')) return 'Larimar';
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
    if (nameLower.includes('summer waves')) return 'Summer Waves';
    if (nameLower.includes('jilong')) return 'Jilong';
    
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  extractBrandFromSpecs(specs) {
    for (const [key, value] of Object.entries(specs)) {
      if (key.toLowerCase().includes('–±—Ä–µ–Ω–¥') || key.toLowerCase().includes('brand')) {
        return value;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  extractVolumeFromSpecs(specs) {
    for (const [key, value] of Object.entries(specs)) {
      if (key.toLowerCase().includes('–æ–±—ä–µ–º') || key.toLowerCase().includes('–ª–∏—Ç—Ä')) {
        return value;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  extractFieldFromSpecs(specs, keywords) {
    for (const [key, value] of Object.entries(specs)) {
      const keyLower = key.toLowerCase();
      if (keywords.some(keyword => keyLower.includes(keyword.toLowerCase()))) {
        return value;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞
   */
  extractDescription(descriptionHtml, name, specs) {
    // –ï—Å–ª–∏ HTML –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (descriptionHtml && descriptionHtml.trim()) {
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
      let description = descriptionHtml
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        .trim();
      
      return description;
    }
    
    // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    return this.generateDescription(name, specs);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (fallback)
   */
  generateDescription(name, specs) {
    let description = `<h2>${name}</h2>\n<p>–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –æ—Ç –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è. –û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–∞—á–∏ –∏ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞.</p>\n\n`;
    
    if (Object.keys(specs).length > 0) {
      description += "<h3>–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</h3>\n<ul>\n";
      Object.entries(specs).forEach(([key, value]) => {
        description += `<li><strong>${key}:</strong> ${value}</li>\n`;
      });
      description += "</ul>";
    }
    
    return description;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
   */
  generateShortDescription(specs) {
    const importantSpecs = ['–î–∏–∞–º–µ—Ç—Ä (–º)', '–û–±—ä–µ–º (–ª)', '–ú–∞—Ç–µ—Ä–∏–∞–ª —á–∞—à–∏'];
    const shortSpecs = [];
    
    importantSpecs.forEach(spec => {
      if (specs[spec]) {
        shortSpecs.push(`${spec}: ${specs[spec]}`);
      }
    });
    
    return shortSpecs.join(' | ');
  }

  /**
   * –ü–∞—É–∑–∞
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async saveResults(filename = 'parsed-products.json') {
    const outputPath = path.join(__dirname, filename);
    
    const output = {
      summary: {
        total: this.results.length + this.errors.length,
        success: this.results.length,
        errors: this.errors.length,
        timestamp: new Date().toISOString()
      },
      products: this.results,
      errors: this.errors
    };
    
    fs.writeFileSync(outputPath, JSON.stringify(output, null, 2), 'utf8');
    console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
    
    return outputPath;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
   */
  async generateImportJson(filename = 'import-products.json') {
    const outputPath = path.join(__dirname, filename);
    
    // –§–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ API
    const importData = this.results.map(product => ({
      ...product,
      // –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      sourceUrl: undefined,
      parsedAt: undefined
    }));
    
    fs.writeFileSync(outputPath, JSON.stringify(importData, null, 2), 'utf8');
    console.log(`üì¶ JSON –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);
    
    return outputPath;
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function parseProductsFromUrls() {
  const parser = new RealParser();
  
  // –ó–î–ï–°–¨ –í–°–¢–ê–í–¨–¢–ï –í–ê–®–ò URL –¢–û–í–ê–†–û–í
  const urls = [
    "https://basseyn.ru/product1",
    "https://basseyn.ru/product2", 
    "https://basseyn.ru/product3"
  ];
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–¥ –≤–∞—à —Å–∞–π—Ç
  parser.setSelectors({
    title: 'h1.product-title',
    sku: '.product-article',
    price: '.price-current',
    originalPrice: '.price-old',
    specifications: '.product-item-detail-properties-block'
  });
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...\n');
    
    await parser.parseProducts(urls);
    
    await parser.saveResults();
    await parser.generateImportJson();
    
    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${parser.results.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${parser.errors.length}`);
    
    if (parser.errors.length > 0) {
      console.log('\n‚ùå –û—à–∏–±–∫–∏:');
      parser.errors.forEach(error => {
        console.log(`  - ${error.url}: ${error.error}`);
      });
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

export default RealParser;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  parseProductsFromUrls();
}