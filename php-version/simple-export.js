#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤—ã—Ö API endpoints
 */

import fetch from 'node-fetch';
import { writeFileSync } from 'fs';

const BASE_URL = 'http://localhost:5000';

async function exportData() {
    console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.log('üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
        const categoriesResponse = await fetch(`${BASE_URL}/api/categories`);
        const categories = await categoriesResponse.json();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...');
        const productsResponse = await fetch(`${BASE_URL}/api/products`);
        const products = await productsResponse.json();
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
        
        // –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        let sql = '';
        
        // –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        sql += "-- –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π AquaPool\n";
        sql += "DELETE FROM categories WHERE id > 0;\n";
        sql += "ALTER SEQUENCE categories_id_seq RESTART WITH 1;\n\n";
        
        categories.forEach(category => {
            sql += `INSERT INTO categories (id, name, slug, description, parent_id, sort_order, image_url) VALUES `;
            sql += `(${category.id}, ${escapeSQL(category.name)}, ${escapeSQL(category.slug)}, `;
            sql += `${escapeSQL(category.description || '')}, ${category.parentId || 'NULL'}, `;
            sql += `${category.sortOrder || 0}, ${escapeSQL(category.imageUrl || '')});\n`;
        });
        
        sql += `\nSELECT setval('categories_id_seq', ${Math.max(...categories.map(c => c.id))});\n\n`;
        
        // –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
        sql += "-- –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ AquaPool\n";
        sql += "DELETE FROM products WHERE id > 0;\n";
        sql += "ALTER SEQUENCE products_id_seq RESTART WITH 1;\n\n";
        
        products.forEach(product => {
            sql += `INSERT INTO products (id, name, slug, sku, description, short_description, price, original_price, category_id, brand, images, specifications, rating, review_count, is_popular, is_active, stock_quantity) VALUES `;
            sql += `(${product.id}, ${escapeSQL(product.name)}, ${escapeSQL(product.slug)}, `;
            sql += `${escapeSQL(product.sku)}, ${escapeSQL(product.description || '')}, `;
            sql += `${escapeSQL(product.shortDescription || '')}, ${product.price}, `;
            sql += `${product.originalPrice || 'NULL'}, ${product.categoryId || 'NULL'}, `;
            sql += `${escapeSQL(product.brand || '')}, ${escapeSQL(JSON.stringify(product.images || []))}, `;
            sql += `${escapeSQL(JSON.stringify(product.specifications || {}))}, `;
            sql += `${product.rating || 0}, ${product.reviewCount || 0}, `;
            sql += `${product.isPopular ? 'true' : 'false'}, ${product.isActive !== false ? 'true' : 'false'}, `;
            sql += `${product.stockQuantity || 0});\n`;
        });
        
        sql += `\nSELECT setval('products_id_seq', ${Math.max(...products.map(p => p.id))});\n\n`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp'—ã
        sql += "-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫\n";
        sql += "UPDATE categories SET created_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP;\n";
        sql += "UPDATE products SET created_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP;\n";
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º SQL
        writeFileSync('import-data.sql', sql);
        
        // –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        const exportData = {
            categories: categories,
            products: products,
            exportDate: new Date().toISOString(),
            totalCategories: categories.length,
            totalProducts: products.length
        };
        
        writeFileSync('export-data.json', JSON.stringify(exportData, null, 2));
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:');
        console.log('   üìÑ import-data.sql - SQL —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        console.log('   üìÑ export-data.json - JSON –¥–∞–Ω–Ω—ã–µ');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
        const instructions = `# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PHP –≤–µ—Ä—Å–∏–∏ AquaPool

## üì¶ –ß—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ
- –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}
- –¢–æ–≤–∞—Ä–æ–≤: ${products.length}
- –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleString('ru-RU')}

## üöÄ –®–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥**
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ php-version/ –≤ –∫–æ—Ä–µ–Ω—å –¥–æ–º–µ–Ω–∞
   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .htaccess –∑–∞–≥—Ä—É–∂–µ–Ω

2. **–°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö**
   - –°–æ–∑–¥–∞–π—Ç–µ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Beget
   - –ó–∞–ø–æ–º–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

3. **–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É**
   \`\`\`sql
   -- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ database.sql –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
   \`\`\`

4. **–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ**
   \`\`\`sql
   -- –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ import-data.sql –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
   \`\`\`

5. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ config.php**
   \`\`\`php
   define('DB_HOST', '–≤–∞—à_—Ö–æ—Å—Ç');
   define('DB_NAME', 'aquapool_db');  
   define('DB_USER', '–≤–∞—à_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
   define('DB_PASS', '–≤–∞—à_–ø–∞—Ä–æ–ª—å');
   \`\`\`

6. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É**
   - –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –∏ –∑–∞–∫–∞–∑

## ‚ú® –ì–æ—Ç–æ–≤–æ!
–í–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω AquaPool –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ PHP —Ö–æ—Å—Ç–∏–Ω–≥–µ.
`;
        
        writeFileSync('INSTALL-INSTRUCTIONS.md', instructions);
        
        console.log('   üìÑ INSTALL-INSTRUCTIONS.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ');
        console.log('');
        console.log('üéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å PHP –≤–µ—Ä—Å–∏—é –Ω–∞ –ª—é–±–æ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error.message);
        
        if (error.message.includes('ECONNREFUSED')) {
            console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node.js —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000');
        }
    }
}

function escapeSQL(value) {
    if (value === null || value === undefined) {
        return 'NULL';
    }
    if (typeof value === 'string') {
        return `'${value.replace(/'/g, "''")}'`;
    }
    return value;
}

exportData();