import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = '7550930591:AAHZHqOnklv8EFkID5XaTkgzCrGwhY3Ex7M';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getActiveAdminChatIds(): Promise<string[]> {
  try {
    const admins = await storage.getTelegramAdmins();
    return admins
      .filter(admin => admin.isActive)
      .map(admin => admin.chatId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î:', error);
    // Fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    const ADMIN_CHAT_IDS = process.env.TELEGRAM_ADMIN_CHAT_IDS || '5696137293';
    return ADMIN_CHAT_IDS.split(',').map(id => id.trim()).filter(Boolean);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async function sendToAllAdmins(message: string, options?: TelegramBot.SendMessageOptions) {
  const adminChatIds = await getActiveAdminChatIds();
  const results = [];
  
  for (const chatId of adminChatIds) {
    try {
      await bot.sendMessage(chatId, message, options);
      results.push({ chatId, success: true });
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await storage.updateLastNotified(chatId);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
      results.push({ chatId, success: false, error });
    }
  }
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
export async function sendConsultationRequest(data: {
  name: string;
  phone: string;
  message: string;
}) {
  try {
    const messageText = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</b>

üë§ <b>–ò–º—è:</b> ${data.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}
üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${data.message}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })} –ú–°–ö
    `;

    await sendToAllAdmins(messageText, {
      parse_mode: 'HTML'
    });

    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    return { success: false, error: error };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
export async function sendOrderNotification(orderData: {
  orderId: number;
  customerName: string;
  phone: string;
  email: string;
  deliveryAddress: string;
  items: Array<{
    name: string;
    sku: string;
    quantity: number;
    price: string;
  }>;
  totalAmount: string | number;
  paymentMethod: string;
  deliveryMethod: string;
}) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const itemsList = orderData.items.map((item, index) => 
      `${index + 1}. <b>${item.name}</b>\n   üì¶ –ê—Ä—Ç–∏–∫—É–ª: ${item.sku}\n   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity} —à—Ç.\n   üí∞ –¶–µ–Ω–∞: ${item.price} ‚ÇΩ`
    ).join('\n\n');

    const messageText = `
üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderData.orderId}</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: ${orderData.customerName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
‚Ä¢ Email: ${orderData.email}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${itemsList}

üíµ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> ${orderData.totalAmount} ‚ÇΩ

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> ${orderData.deliveryMethod}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${orderData.deliveryAddress}

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${orderData.paymentMethod}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })} –ú–°–ö

üìû <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    `;

    await sendToAllAdmins(messageText, {
      parse_mode: 'HTML'
    });

    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram:', error);
    return { success: false, error: error };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
export async function testTelegramBot() {
  try {
    const me = await bot.getMe();
    const adminChatIds = await getActiveAdminChatIds();
    console.log('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω:', me.username);
    console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ ${adminChatIds.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`, adminChatIds.join(', '));
    
    return { 
      success: true, 
      botInfo: me,
      adminChatIds: adminChatIds,
      adminCount: adminChatIds.length
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –±–æ—Ç—É:', error);
    return { success: false, error: error };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export async function getAdminChatIds() {
  const adminChatIds = await getActiveAdminChatIds();
  return {
    chatIds: adminChatIds,
    count: adminChatIds.length,
    source: 'database'
  };
}