#!/usr/bin/env node

import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–±–æ—Ä–∫—É AquaPool...');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function runCommand(command, description) {
  return new Promise((resolve, reject) => {
    console.log(`üì¶ ${description}...`);
    
    const process = exec(command, { 
      timeout: 1800000, // 30 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
      maxBuffer: 1024 * 1024 * 10 // 10MB –±—É—Ñ–µ—Ä
    });
    
    process.stdout.on('data', (data) => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (data.includes('‚úì') || data.includes('built') || data.includes('generated')) {
        console.log(data.toString().trim());
      }
    });
    
    process.stderr.on('data', (data) => {
      const message = data.toString().trim();
      if (!message.includes('Browserslist') && !message.includes('outdated')) {
        console.log(`‚ö†Ô∏è  ${message}`);
      }
    });
    
    process.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ ${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
        resolve();
      } else {
        console.log(`‚ùå ${description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
        reject(new Error(`${description} failed with exit code ${code}`));
      }
    });
    
    process.on('error', (error) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${description}:`, error.message);
      reject(error);
    });
  });
}

async function buildProduction() {
  try {
    console.log('üéØ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–±–æ—Ä–∫—É –¥–ª—è AquaPool');
    
    // 1. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
    if (fs.existsSync('dist')) {
      fs.rmSync('dist', { recursive: true, force: true });
    }
    fs.mkdirSync('dist', { recursive: true });
    
    // 2. –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å production –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await runCommand('NODE_ENV=production npx vite build --mode production', '–°–±–æ—Ä–∫–∞ React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞');
    
    // 3. –°–±–æ—Ä–∫–∞ –±—ç–∫–µ–Ω–¥–∞
    await runCommand('npx esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outfile=server/index.js --minify', '–°–±–æ—Ä–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞');
    
    // 4. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    const staticFiles = [
      { src: 'yandex_816365dd176df39c.html', dest: 'dist/yandex_816365dd176df39c.html' },
      { src: 'package.json', dest: 'dist/package.json' }
    ];
    
    staticFiles.forEach(({ src, dest }) => {
      if (fs.existsSync(src)) {
        fs.copyFileSync(src, dest);
        console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω ${src}`);
      }
    });
    
    // 5. –°–æ–∑–¥–∞–Ω–∏–µ production package.json
    const prodPackage = {
      "name": "aquapool-production",
      "version": "1.0.0",
      "type": "module",
      "scripts": {
        "start": "node server/index.js"
      },
      "dependencies": {
        "express": "^4.18.2",
        "drizzle-orm": "^0.30.4",
        "@neondatabase/serverless": "^0.9.0",
        "node-telegram-bot-api": "^0.66.0"
      }
    };
    
    fs.writeFileSync('dist/package.json', JSON.stringify(prodPackage, null, 2));
    
    // 6. –°–æ–∑–¥–∞–Ω–∏–µ production —Å–µ—Ä–≤–µ—Ä–∞
    const prodServer = `
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ò–º–ø–æ—Ä—Ç —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
import('./server/index.js').then(serverModule => {
  console.log('üöÄ AquaPool Production Server —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  console.log('üåê –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –¥–æ–º–µ–Ω–∞ aquapool-shop.ru');
}).catch(console.error);
`;
    
    fs.writeFileSync('dist/index.js', prodServer);
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const distFiles = fs.readdirSync('dist');
    console.log('\nüìÅ –§–∞–π–ª—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–±–æ—Ä–∫–µ:');
    distFiles.forEach(file => {
      const stats = fs.statSync(path.join('dist', file));
      console.log(`   ${file} (${(stats.size / 1024).toFixed(1)} KB)`);
    });
    
    console.log('\nüéâ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–±–æ—Ä–∫–∞ AquaPool –≥–æ—Ç–æ–≤–∞!');
    console.log('‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥: —Å–æ–±—Ä–∞–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('‚úÖ –ë—ç–∫–µ–Ω–¥: –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ Yandex –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞');
    console.log('üì¶ –ì–æ—Ç–æ–≤ –∫ deployment –Ω–∞ Replit');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
    process.exit(1);
  }
}

buildProduction();