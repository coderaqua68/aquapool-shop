// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ intex-bassein.ru —Å —Ç–æ–≤–∞—Ä–∞–º–∏

(function() {
  console.log('üèä‚Äç‚ôÇÔ∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤...');
  
  const results = {
    products: [],
    timestamp: new Date().toISOString(),
    url: window.location.href
  };

  function extractProducts() {
    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    const productSelectors = [
      '.product-item',
      '.catalog-item', 
      '.item-block',
      '.product-card',
      '.catalog-element-item',
      '.bx-catalog-item',
      '[data-entity="item"]',
      '.product',
      '.item',
      '.goods-item',
      '.catalog-item-card'
    ];

    let productElements = [];
    let usedSelector = '';

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã
    for (const selector of productSelectors) {
      productElements = document.querySelectorAll(selector);
      if (productElements.length > 0) {
        usedSelector = selector;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${productElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
        break;
      }
    }

    if (productElements.length === 0) {
      console.error('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      const allDivs = document.querySelectorAll('div[class*="product"], div[class*="item"], div[class*="catalog"]');
      console.log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${allDivs.length}`);
      allDivs.slice(0, 5).forEach((el, i) => {
        console.log(`${i + 1}. ${el.className}`);
      });
      
      return [];
    }

    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${productElements.length} —Ç–æ–≤–∞—Ä–æ–≤...`);

    productElements.forEach((element, index) => {
      try {
        const product = extractProductData(element, index);
        if (product) {
          results.products.push(product);
          console.log(`${index + 1}. ${product.name.substring(0, 50)}... - ${product.price} ‚ÇΩ`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${index + 1}:`, error.message);
      }
    });

    return results.products;
  }

  function extractProductData(element, index) {
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const nameSelectors = [
      '.item-title a',
      '.product-name a',
      '.catalog-item-title a',
      '.name a',
      'h3 a',
      '.title a',
      '[data-entity="name"] a',
      'a[href*="/catalog/"]',
      '.product-title',
      '.item-name'
    ];

    let name = '';
    let productUrl = '';

    for (const selector of nameSelectors) {
      const nameEl = element.querySelector(selector);
      if (nameEl) {
        name = nameEl.textContent.trim();
        productUrl = nameEl.href || window.location.href;
        break;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Å—ã–ª–∫—É, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    if (!name) {
      const textSelectors = ['.item-title', '.product-name', '.name', 'h3', '.title'];
      for (const selector of textSelectors) {
        const nameEl = element.querySelector(selector);
        if (nameEl) {
          name = nameEl.textContent.trim();
          break;
        }
      }
    }

    if (!name) {
      throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω
    const allText = element.textContent;
    const priceRegex = /(\d[\d\s]*(?:\d))\s*‚ÇΩ/g;
    const priceMatches = [...allText.matchAll(priceRegex)];
    
    let currentPrice = '';
    let originalPrice = null;

    if (priceMatches.length >= 2) {
      // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å–∫–∏–¥–∫–∞
      const prices = priceMatches.map(m => parseInt(m[1].replace(/\s/g, '')))
                                  .sort((a, b) => b - a);
      originalPrice = prices[0].toString();
      currentPrice = prices[1].toString();
    } else if (priceMatches.length === 1) {
      currentPrice = priceMatches[0][1].replace(/\s/g, '');
    }

    if (!currentPrice) {
      throw new Error('–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const img = element.querySelector('img');
    let imageUrl = '';
    if (img) {
      imageUrl = img.src || img.dataset.src || img.dataset.original || '';
      if (imageUrl && !imageUrl.startsWith('http')) {
        imageUrl = new URL(imageUrl, window.location.origin).href;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
    const nameLower = name.toLowerCase();
    let brand = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    if (nameLower.includes('intex')) brand = 'Intex';
    else if (nameLower.includes('bestway')) brand = 'Bestway';
    else if (nameLower.includes('jilong')) brand = 'Jilong';
    else if (nameLower.includes('laguna')) brand = 'Laguna';

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    let category = 'accessories';
    if (nameLower.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π') || nameLower.includes('frame')) {
      category = 'frame-pools';
    } else if (nameLower.includes('–Ω–∞–¥—É–≤–Ω–æ–π') || nameLower.includes('easy set')) {
      category = 'inflatable-pools';
    } else if (nameLower.includes('–Ω–∞—Å–æ—Å') || nameLower.includes('—Ñ–∏–ª—å—Ç—Ä')) {
      category = 'pumps-filters';
    } else if (nameLower.includes('–ª–µ—Å—Ç–Ω–∏—Ü')) {
      category = 'ladders';
    } else if (nameLower.includes('—Ç–µ–Ω—Ç') || nameLower.includes('–ø–æ–∫—Ä—ã—Ç')) {
      category = 'covers-underlays';
    } else if (nameLower.includes('—Ö–∏–º–∏—è') || nameLower.includes('—Ö–ª–æ—Ä')) {
      category = 'chemicals';
    }

    // –ê—Ä—Ç–∏–∫—É–ª
    const articleMatch = name.match(/(\d{5,})/);
    const article = articleMatch ? articleMatch[1] : '';

    // –°–∫–∏–¥–∫–∞
    const discount = originalPrice && currentPrice ? 
      Math.round((1 - parseInt(currentPrice) / parseInt(originalPrice)) * 100) : 0;

    return {
      name: name,
      description: `${brand} - ${name}`,
      price: currentPrice,
      originalPrice: originalPrice,
      brand: brand,
      category: category,
      article: article,
      imageUrl: imageUrl,
      url: productUrl,
      inStock: true,
      discount: discount,
      scrapedAt: new Date().toISOString(),
      source: window.location.href
    };
  }

  // –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
  const products = extractProducts();
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:');
  console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${window.location.href}`);
  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
  
  if (products.length === 0) {
    console.log('‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏');
    console.log('2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å');
    return null;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
  console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:');
  products.slice(0, 3).forEach((product, i) => {
    console.log(`${i + 1}. ${product.name} - ${product.price} ‚ÇΩ (${product.brand})`);
  });

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
  const brands = {};
  products.forEach(p => {
    brands[p.brand] = (brands[p.brand] || 0) + 1;
  });
  
  console.log('\nüè∑Ô∏è –ü–æ –±—Ä–µ–Ω–¥–∞–º:');
  Object.entries(brands).forEach(([brand, count]) => {
    console.log(`${brand}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
  });

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  const dataStr = JSON.stringify(results, null, 2);
  const dataBlob = new Blob([dataStr], {type: 'application/json'});
  const url = URL.createObjectURL(dataBlob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `intex-products-${Date.now()}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);

  console.log('\nüíæ –§–∞–π–ª JSON —Å–∫–∞—á–∞–Ω!');
  console.log('\nüì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥.');
  
  return results;
})();