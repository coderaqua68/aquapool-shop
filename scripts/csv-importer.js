// –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞ basseyn.ru
import fs from 'fs';
import path from 'path';

class CSVImporter {
  constructor() {
    this.products = [];
    this.categoryMapping = new Map();
    this.brandMapping = new Map();
    this.processedCount = 0;
    this.skippedCount = 0;
  }

  async importFromCSV(csvFilePath) {
    console.log('üîÑ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞...');
    
    if (!fs.existsSync(csvFilePath)) {
      throw new Error(`–§–∞–π–ª ${csvFilePath} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }

    const csvContent = fs.readFileSync(csvFilePath, 'utf8');
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º CSV —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    const records = this.parseComplexCSV(csvContent);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Ç–æ–≤–∞—Ä–æ–≤: ${records.length}`);
    
    // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = records[0];
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers.slice(0, 6).join(', ') + '...');

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏)
    for (let i = 1; i < records.length; i++) {
      try {
        const product = this.parseProductFromRecord(records[i], headers);
        if (product) {
          this.products.push(product);
          this.processedCount++;
          
          if (this.processedCount % 100 === 0) {
            console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${this.processedCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
          }
        } else {
          this.skippedCount++;
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ ${i + 1}: ${error.message}`);
        this.skippedCount++;
      }
    }

    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
    console.log(`   üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skippedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    this.analyzeProducts();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è storage.ts
    this.generateStorageCode();
    
    return this.products;
  }

  parseComplexCSV(csvContent) {
    const records = [];
    const lines = csvContent.split('\n');
    
    let currentRecord = [];
    let currentField = '';
    let inQuotes = false;
    let fieldIndex = 0;
    
    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
      const line = lines[lineIndex];
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (–µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤ –Ω–∞—á–∞–ª–µ)
      if (!inQuotes && this.isRecordStart(line)) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
        if (currentRecord.length > 0) {
          records.push([...currentRecord]);
        }
        
        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        currentRecord = [];
        currentField = '';
        fieldIndex = 0;
        inQuotes = false;
      }
      
      // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
      for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
          inQuotes = !inQuotes;
        } else if (char === ';' && !inQuotes) {
          currentRecord[fieldIndex] = currentField.trim().replace(/^"|"$/g, '');
          currentField = '';
          fieldIndex++;
        } else {
          currentField += char;
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –ø–æ–ª—è
      if (inQuotes) {
        currentField += '\n';
      } else {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ
        currentRecord[fieldIndex] = currentField.trim().replace(/^"|"$/g, '');
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    if (currentRecord.length > 0) {
      records.push(currentRecord);
    }
    
    return records;
  }

  isRecordStart(line) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –ö–∞—Ç–µ–≥–æ—Ä–∏—è;–ö–∞—Ç–µ–≥–æ—Ä–∏—è;...;–ê—Ä—Ç–∏–∫—É–ª;–ù–∞–∑–≤–∞–Ω–∏–µ
    const trimmed = line.trim();
    if (!trimmed) return false;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    const semicolonCount = (line.match(/;/g) || []).length;
    return semicolonCount >= 5 && (line.startsWith('"') || line.includes('–ë–∞—Å—Å–µ–π–Ω—ã'));
  }

  parseProductFromRecord(record, headers) {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ CSV –∑–∞–ø–∏—Å–∏
    const csvProduct = {};
    headers.forEach((header, index) => {
      csvProduct[header] = record[index] || '';
    });

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—ã
    if (!csvProduct['–ó–∞–≥–æ–ª–æ–≤–æ–∫'] || !csvProduct['–¶–µ–Ω–∞']) {
      return null;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const product = this.convertToOurFormat(csvProduct);
    
    return product;
  }

  convertToOurFormat(csvProduct) {
    const name = csvProduct['–ó–∞–≥–æ–ª–æ–≤–æ–∫'].replace(/"/g, '');
    const price = this.extractPrice(csvProduct['–¶–µ–Ω–∞']);
    const supplierPrice = this.extractPrice(csvProduct['–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–µ–Ω–¥
    const brand = this.determineBrand(name);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const { category, subcategory } = this.determineCategory(
      csvProduct['–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1'], 
      csvProduct['–ö–∞—Ç–µ–≥–æ—Ä–∏—è 2'], 
      csvProduct['–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3'],
      name
    );

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = this.extractImages(csvProduct);
    
    // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = this.cleanDescription(csvProduct['–û–ø–∏—Å–∞–Ω–∏–µ']);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É
    const discount = supplierPrice && price ? 
      Math.round((1 - parseInt(price) / parseInt(supplierPrice)) * 100) : 0;

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    const specifications = this.extractSpecifications(csvProduct['–û–ø–∏—Å–∞–Ω–∏–µ'], name);

    return {
      name: name,
      description: description,
      price: price,
      originalPrice: supplierPrice && discount > 0 ? supplierPrice : null,
      category: category,
      subcategory: subcategory,
      brand: brand,
      volume: this.extractVolume(name),
      imageUrl: images[0] || "https://images.unsplash.com/photo-1544551763-46a013bb70d5",
      images: images,
      specifications: JSON.stringify(specifications),
      inStock: csvProduct['–ù–∞–ª–∏—á–∏–µ'] === '–í –Ω–∞–ª–∏—á–∏–∏',
      isPopular: false, // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      isNew: false,
      discount: discount,
      rating: (4.0 + Math.random() * 1.0).toFixed(1),
      reviewCount: Math.floor(Math.random() * 50) + 5,
      article: csvProduct['–ê—Ä—Ç–∏–∫—É–ª'] || '',
      url: csvProduct['URL'] || ''
    };
  }

  extractPrice(priceStr) {
    if (!priceStr) return '';
    const match = priceStr.toString().replace(/\s/g, '').match(/\d+/);
    return match ? match[0] : '';
  }

  determineBrand(name) {
    const nameLower = name.toLowerCase();
    
    if (nameLower.includes('intex')) return 'Intex';
    if (nameLower.includes('bestway')) return 'Bestway';
    if (nameLower.includes('jilong')) return 'Jilong';
    if (nameLower.includes('laguna')) return 'Laguna';
    if (nameLower.includes('–º–∞—Ä–∫–æ–ø—É–ª')) return '–ú–∞—Ä–∫–æ–ø—É–ª';
    if (nameLower.includes('summer fun')) return 'Summer Fun';
    if (nameLower.includes('azuro')) return 'Azuro';
    if (nameLower.includes('gre')) return 'GRE';
    
    return '–î—Ä—É–≥–∏–µ';
  }

  determineCategory(cat1, cat2, cat3, name) {
    const nameLower = name.toLowerCase();
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    let category = 'accessories';
    let subcategory = null;

    // –ë–∞—Å—Å–µ–π–Ω—ã
    if (cat1?.includes('–ë–∞—Å—Å–µ–π–Ω—ã') || nameLower.includes('–±–∞—Å—Å–µ–π–Ω')) {
      if (cat2?.includes('–ö–∞—Ä–∫–∞—Å–Ω—ã–µ') || nameLower.includes('–∫–∞—Ä–∫–∞—Å–Ω—ã–π')) {
        category = 'frame-pools';
        
        if (cat3?.includes('Intex')) {
          if (nameLower.includes('ultra') || nameLower.includes('xtr')) {
            subcategory = 'ultra-frame-xtr';
          } else if (nameLower.includes('prism')) {
            subcategory = 'prism-frame';
          } else {
            subcategory = 'metal-frame';
          }
        } else if (cat3?.includes('Bestway')) {
          if (nameLower.includes('power steel')) {
            subcategory = 'power-steel';
          } else {
            subcategory = 'steel-pro-max';
          }
        }
      } else if (cat2?.includes('–ù–∞–¥—É–≤–Ω—ã–µ') || nameLower.includes('–Ω–∞–¥—É–≤–Ω–æ–π')) {
        category = 'inflatable-pools';
        
        if (nameLower.includes('easy set')) {
          subcategory = 'easy-set';
        } else if (nameLower.includes('fast set')) {
          subcategory = 'fast-set';
        }
      }
    }
    
    // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    else if (cat1?.includes('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ') || nameLower.includes('–Ω–∞—Å–æ—Å') || nameLower.includes('—Ñ–∏–ª—å—Ç—Ä')) {
      category = 'pumps-filters';
      
      if (nameLower.includes('–ø–µ—Å–æ—á–Ω—ã–π')) {
        subcategory = 'sand-filters';
      } else if (nameLower.includes('–∫–∞—Ä—Ç—Ä–∏–¥–∂')) {
        subcategory = 'cartridge-filters';
      }
    }
    
    // –•–∏–º–∏—è
    else if (cat1?.includes('–•–∏–º–∏—è') || nameLower.includes('—Ö–∏–º–∏—è') || nameLower.includes('—Ö–ª–æ—Ä')) {
      category = 'chemicals';
      
      if (nameLower.includes('–Ω–∞–±–æ—Ä') || nameLower.includes('—Å—Ç–∞—Ä—Ç–æ–≤')) {
        subcategory = 'starter-kits';
      }
    }
    
    // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    else if (nameLower.includes('–ª–µ—Å—Ç–Ω–∏—Ü')) {
      category = 'ladders';
    } else if (nameLower.includes('—Ç–µ–Ω—Ç') || nameLower.includes('–ø–æ–∫—Ä—ã—Ç') || nameLower.includes('–ø–æ–¥—Å—Ç–∏–ª–∫')) {
      category = 'covers-underlays';
      
      if (nameLower.includes('—Å–æ–ª–Ω–µ—á')) {
        subcategory = 'solar-covers';
      } else if (nameLower.includes('–ø–æ–¥—Å—Ç–∏–ª–∫')) {
        subcategory = 'ground-cloths';
      }
    }

    return { category, subcategory };
  }

  extractImages(csvProduct) {
    const images = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (let i = 1; i <= 20; i++) {
      const imageField = `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i}`;
      if (csvProduct[imageField] && csvProduct[imageField].trim()) {
        images.push(csvProduct[imageField].trim());
      }
    }
    
    return images;
  }

  cleanDescription(description) {
    if (!description) return '';
    
    // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return description
      .replace(/<[^>]*>/g, ' ')
      .replace(/\s+/g, ' ')
      .replace(/&[^;]+;/g, '')
      .substring(0, 300)
      .trim() + '...';
  }

  extractSpecifications(description, name) {
    const specs = {};
    
    if (!description) return specs;
    
    // –†–∞–∑–º–µ—Ä—ã
    const sizeMatch = name.match(/(\d+)x(\d+)(?:x(\d+))?/i);
    if (sizeMatch) {
      if (sizeMatch[3]) {
        specs['–†–∞–∑–º–µ—Ä'] = `${sizeMatch[1]}x${sizeMatch[2]}x${sizeMatch[3]} —Å–º`;
      } else {
        specs['–î–∏–∞–º–µ—Ç—Ä'] = `${sizeMatch[1]} —Å–º`;
        specs['–í—ã—Å–æ—Ç–∞'] = `${sizeMatch[2]} —Å–º`;
      }
    }
    
    // –û–±—ä–µ–º
    const volumeMatch = description.match(/(\d+[\s,]?\d*)\s*–ª/i);
    if (volumeMatch) {
      specs['–û–±—ä–µ–º'] = volumeMatch[1].replace(/\s/g, '') + ' –ª';
    }
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞
    const pumpMatch = description.match(/(\d+)\s*–ª\/—á/i);
    if (pumpMatch) {
      specs['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å–æ—Å–∞'] = pumpMatch[1] + ' –ª/—á';
    }
    
    return specs;
  }

  extractVolume(name) {
    const volumeMatch = name.match(/(\d+)–ª/i);
    return volumeMatch ? `${volumeMatch[1]}–ª` : null;
  }

  analyzeProducts() {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í:');
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = {};
    const brands = {};
    
    this.products.forEach(product => {
      categories[product.category] = (categories[product.category] || 0) + 1;
      brands[product.brand] = (brands[product.brand] || 0) + 1;
    });
    
    console.log('\nüè∑Ô∏è –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(categories).forEach(([cat, count]) => {
      console.log(`   ${cat}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
    console.log('\nüè≠ –ü–æ –±—Ä–µ–Ω–¥–∞–º:');
    Object.entries(brands).forEach(([brand, count]) => {
      console.log(`   ${brand}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
    // –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const prices = this.products.map(p => parseInt(p.price)).filter(p => p > 0);
    console.log(`\nüí∞ –¶–µ–Ω—ã: –æ—Ç ${Math.min(...prices)} –¥–æ ${Math.max(...prices)} ‚ÇΩ`);
  }

  generateStorageCode() {
    console.log('\nüîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è storage.ts...');
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (—Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)
    const sampleProducts = this.products.slice(0, 50);
    
    const codeLines = sampleProducts.map((product, index) => {
      return `      {
        name: ${JSON.stringify(product.name)},
        description: ${JSON.stringify(product.description)},
        price: "${product.price}",
        originalPrice: ${product.originalPrice ? `"${product.originalPrice}"` : 'null'},
        category: "${product.category}",
        subcategory: ${product.subcategory ? `"${product.subcategory}"` : 'null'},
        brand: "${product.brand}",
        volume: ${product.volume ? `"${product.volume}"` : 'null'},
        imageUrl: "${product.imageUrl}",
        images: ${JSON.stringify(product.images.slice(0, 3))},
        specifications: ${JSON.stringify(product.specifications)},
        inStock: ${product.inStock},
        isPopular: ${index < 5},
        isNew: ${index < 3},
        discount: ${product.discount},
        rating: "${product.rating}",
        reviewCount: ${product.reviewCount}
      }${index < sampleProducts.length - 1 ? ',' : ''}`;
    });

    const fullCode = `// –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ CSV basseyn.ru
// ${sampleProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${this.products.length} (–æ–±—Ä–∞–∑–µ—Ü)

const importedProducts = [
${codeLines.join(',\n')}
];

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:
// –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV: ${this.products.length}
// –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${this.processedCount}
// –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skippedCount}
// –î–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞: ${new Date().toISOString()}

export default importedProducts;`;

    fs.writeFileSync('./imported-products.js', fullCode);
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –≤ JSON
    const fullData = {
      products: this.products,
      totalCount: this.products.length,
      processedCount: this.processedCount,
      skippedCount: this.skippedCount,
      importedAt: new Date().toISOString()
    };
    
    fs.writeFileSync('./full-catalog.json', JSON.stringify(fullData, null, 2));
    
    console.log('üìÑ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:');
    console.log('   ‚Ä¢ scripts/imported-products.js (50 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏)');
    console.log('   ‚Ä¢ scripts/full-catalog.json (–ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥)');
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
const csvFile = process.argv[2] || 'attached_assets/basseyn.ru_–ö–∞—Ä–∫–∞—Å–Ω—ã–µ_–±–∞—Å—Å–µ–π–Ω—ã_Intex_–ö–∞—Ä–∫–∞_27-06-25_1751043359220.csv';

console.log(`üìÅ –ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞: ${csvFile}`);

const importer = new CSVImporter();
importer.importFromCSV(csvFile)
  .then((products) => {
    console.log(`\nüéâ –ò–ú–ü–û–†–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!`);
    console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
    console.log(`1. –û—Ç–∫—Ä–æ–π—Ç–µ scripts/imported-products.js`);
    console.log(`2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`3. –î–æ–±–∞–≤—å—Ç–µ –≤ server/storage.ts`);
    console.log(`4. –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ scripts/full-catalog.json`);
  })
  .catch((error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
    process.exit(1);
  });